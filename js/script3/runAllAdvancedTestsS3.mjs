// js/script3/runAllAdvancedTestsS3.mjs

import { logS3 } from './s3_utils.mjs';
import { testOOBBoundaryCondition } from './testArrayBufferVictimCrash.mjs';

/**
 * Fun√ß√£o principal para executar os testes avan√ßados de explora√ß√£o.
 */
async function runTests() {
    logS3("=============================================", "title");
    logS3("üöÄ INICIANDO SU√çTE DE TESTES AVAN√áADOS (S3) üöÄ", "title");
    logS3("=============================================", "title");

    let allTestsPassed = true;

    try {
        // Executa o novo teste de condi√ß√£o de limite
        const boundaryTestResult = await testOOBBoundaryCondition();
        if (!boundaryTestResult) {
            allTestsPassed = false;
        }

        // Voc√™ pode adicionar a chamada ao seu teste original aqui se desejar
        // logS3("--- Pr√≥ximo teste: Varredura de Mem√≥ria ---", "test");
        // await executeArrayBufferVictimCrashTest();

    } catch (e) {
        logS3(`üö® ERRO INESPERADO NA SU√çTE DE TESTES: ${e.message}`, "critical", "runTests");
        allTestsPassed = false;
    } finally {
        logS3("=============================================", "title");
        if (allTestsPassed) {
            logS3("‚úÖ Su√≠te de testes conclu√≠da com SUCESSO.", "good", "runTests");
        } else {
            logS3("‚ùå Su√≠te de testes conclu√≠da com FALHAS.", "critical", "runTests");
        }
        logS3("=============================================", "title");
    }
}

// Inicia a execu√ß√£o dos testes
runTests();
